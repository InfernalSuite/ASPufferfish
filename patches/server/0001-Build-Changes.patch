From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Mon, 26 Dec 2022 11:25:35 -0500
Subject: [PATCH] Build Changes

Change shadow plugin

diff --git a/build.gradle.kts b/build.gradle.kts
index 91b7db7128ace54beaa6ea4e29a5a6f157a4acf9..88313dc26db6491a7989aacc71ef1401c15a5204 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -4,6 +4,7 @@ import java.time.Instant
 plugins {
     java
     `maven-publish`
+    id("io.github.goooler.shadow")
 }
 
 val log4jPlugins = sourceSets.create("log4jPlugins")
@@ -13,7 +14,13 @@ configurations.named(log4jPlugins.compileClasspathConfigurationName) {
 val alsoShade: Configuration by configurations.creating
 
 dependencies {
-    implementation(project(":pufferfish-api")) // Pufferfish // Paper
+    // ASWM start
+    implementation(project(":slimeworldmanager-api"))
+    implementation(project(":core"))
+    implementation("io.papermc.paper:paper-mojangapi:1.21.1-R0.1-SNAPSHOT") {
+        exclude("io.papermc.paper", "paper-api")
+    }
+    // ASWM end
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.21.0")
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
@@ -101,14 +108,14 @@ tasks.jar {
         val gitBranch = git("rev-parse", "--abbrev-ref", "HEAD").getText().trim() // Paper
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "Pufferfish", // Pufferfish
+            "Implementation-Title" to "AdvancedSlimePufferfish", // Pufferfish // ASWM
             "Implementation-Version" to implementationVersion,
             "Implementation-Vendor" to date, // Paper
-            "Specification-Title" to "Pufferfish", // Pufferfish
+            "Specification-Title" to "AdvancedSlimePufferfish", // Pufferfish // ASWM
             "Specification-Version" to project.version,
-            "Specification-Vendor" to "Pufferfish Studios LLC", // Pufferfish
-            "Brand-Id" to "pufferfish:pufferfish", // Pufferfish
-            "Brand-Name" to "Pufferfish", // Pufferfish
+            "Specification-Vendor" to "InfernalSuite Team", // Pufferfish // ASWM
+            "Brand-Id" to "infernalsuite:advancedslimepufferfish", // Pufferfish // ASWM
+            "Brand-Name" to "AdvancedSlimePufferfish", // Pufferfish // ASWM
             "Build-Number" to (build ?: ""),
             "Build-Time" to Instant.now().toString(),
             "Git-Branch" to gitBranch, // Paper
@@ -169,7 +176,7 @@ fun TaskContainer.registerRunTask(
     name: String,
     block: JavaExec.() -> Unit
 ): TaskProvider<JavaExec> = register<JavaExec>(name) {
-    group = "paper"
+    group = "slimeworldmanager" // ASWM
     mainClass.set("org.bukkit.craftbukkit.Main")
     standardInput = System.`in`
     workingDir = rootProject.layout.projectDirectory
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
index 5c7f2471a0b15ac2e714527296ad2aa7291999eb..421469d0969cd75b2f8d365e8666abf7a4f1b1f2 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
@@ -40,7 +40,7 @@ public final class ChunkEntitySlices {
     private final EntityCollectionBySection hardCollidingEntities;
     private final Reference2ObjectOpenHashMap<Class<? extends Entity>, EntityCollectionBySection> entitiesByClass;
     private final Reference2ObjectOpenHashMap<EntityType<?>, EntityCollectionBySection> entitiesByType;
-    private final EntityList entities = new EntityList();
+    public final EntityList entities = new EntityList(); // ASWM - make public
 
     public FullChunkStatus status;
 
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
index 58d3d1a47e9f2423c467bb329c2d5f4b58a8b5ef..19a590bd5b08dc7377fc17262bb343753a482c68 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
@@ -184,7 +184,8 @@ public final class ChunkHolderManager {
         };
     }
 
-    public void close(final boolean save, final boolean halt) {
+    public void close(boolean save, final boolean halt) { // ASWM
+        if (this.world instanceof com.infernalsuite.aswm.level.SlimeLevelInstance) save = false; // ASWM
         TickThread.ensureTickThread("Closing world off-main");
         if (halt) {
             LOGGER.info("Waiting 60s for chunk system to halt for world '" + WorldUtil.getWorldName(this.world) + "'");
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkLoadTask.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkLoadTask.java
index 1ab93f219246d0b4dcdfd0f685f47c13091425f8..3f5fbc7a1394972e55ac5b345e81b40cefa7d246 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkLoadTask.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkLoadTask.java
@@ -4,6 +4,7 @@ import ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue;
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import ca.spottedleaf.concurrentutil.lock.ReentrantAreaLock;
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
+import com.infernalsuite.aswm.level.CommonLoadTask;
 import ca.spottedleaf.moonrise.patches.chunk_system.ChunkSystemConverters;
 import ca.spottedleaf.moonrise.patches.chunk_system.ChunkSystemFeatures;
 import ca.spottedleaf.moonrise.patches.chunk_system.io.RegionFileIOThread;
@@ -31,8 +32,8 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ChunkLoadTask.class);
 
-    private final NewChunkHolder chunkHolder;
-    private final ChunkDataLoadTask loadTask;
+    public final NewChunkHolder chunkHolder; // ASWM
+    private final CommonLoadTask loadTask;
 
     private volatile boolean cancelled;
     private NewChunkHolder.GenericDataLoadTaskCallback entityLoadTask;
@@ -44,11 +45,20 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
                          final NewChunkHolder chunkHolder, final PrioritisedExecutor.Priority priority) {
         super(scheduler, world, chunkX, chunkZ);
         this.chunkHolder = chunkHolder;
-        this.loadTask = new ChunkDataLoadTask(scheduler, world, chunkX, chunkZ, priority);
-        this.loadTask.addCallback((final GenericDataLoadTask.TaskResult<ChunkAccess, Throwable> result) -> {
-            ChunkLoadTask.this.loadResult = result; // must be before getAndDecrement
-            ChunkLoadTask.this.tryCompleteLoad();
-        });
+        // ASWM start
+        if (world instanceof com.infernalsuite.aswm.level.SlimeLevelInstance levelInstance) {
+
+            this.loadTask = levelInstance.getLoadTask(this, scheduler, world, chunkX, chunkZ, priority, result -> {
+                ChunkLoadTask.this.complete(result == null ? null : result.left(), result == null ? null : result.right());
+            });
+        } else {
+            ChunkDataLoadTask task = new ChunkDataLoadTask(scheduler, world, chunkX, chunkZ, priority);
+            task.addCallback((final GenericDataLoadTask.TaskResult<ChunkAccess, Throwable> result) -> {
+                ChunkLoadTask.this.complete(result == null ? null : result.left(), result == null ? null : result.right());
+            });
+            this.loadTask = task;
+        }
+        // ASWM end
     }
 
     private void tryCompleteLoad() {
@@ -272,7 +282,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         }
     }
 
-    private static final class ChunkDataLoadTask extends CallbackDataLoadTask<CompoundTag, ChunkAccess> {
+    private static final class ChunkDataLoadTask extends CallbackDataLoadTask<CompoundTag, ChunkAccess> implements CommonLoadTask { // ASWM
         private ChunkDataLoadTask(final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX,
                                     final int chunkZ, final PrioritisedExecutor.Priority priority) {
             super(scheduler, world, chunkX, chunkZ, RegionFileIOThread.RegionFileType.CHUNK_DATA, priority);
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index 532306cacd52579cdf37e4aca25887b1ed3ba6a1..d2a4f2522df54aee3e8bf53c1d26d818ea6b88fa 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -35,7 +35,7 @@ public class PaperVersionFetcher implements VersionFetcher {
     private static final Logger LOGGER = LogUtils.getClassLogger();
     private static final int DISTANCE_ERROR = -1;
     private static final int DISTANCE_UNKNOWN = -2;
-    private static final String DOWNLOAD_PAGE = "https://papermc.io/downloads/paper";
+    private static final String DOWNLOAD_PAGE = "https://discord.gg/YevvsMa"; // ASWM
 
     @Override
     public long getCacheTime() {
@@ -49,7 +49,7 @@ public class PaperVersionFetcher implements VersionFetcher {
         if (build.buildNumber().isEmpty() && build.gitCommit().isEmpty()) {
             updateMessage = text("You are running a development version without access to version information", color(0xFF5300));
         } else {
-            updateMessage = getUpdateStatusMessage("PaperMC/Paper", build);
+            updateMessage = getUpdateStatusMessage("InfernalSuite/ASPufferfish", build); // ASWM
         }
         final @Nullable Component history = this.getHistory();
 
@@ -58,17 +58,18 @@ public class PaperVersionFetcher implements VersionFetcher {
 
     private static Component getUpdateStatusMessage(final String repo, final ServerBuildInfo build) {
         int distance = DISTANCE_ERROR;
-
+        /* // AdvancedSlimePaper start
         final OptionalInt buildNumber = build.buildNumber();
         if (buildNumber.isPresent()) {
             distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
         } else {
+        */ // AdvancedSlimePaper end
             final Optional<String> gitBranch = build.gitBranch();
             final Optional<String> gitCommit = build.gitCommit();
             if (gitBranch.isPresent() && gitCommit.isPresent()) {
                 distance = fetchDistanceFromGitHub(repo, gitBranch.get(), gitCommit.get());
             }
-        }
+        //} // AdvancedSlimePaper
 
         return switch (distance) {
             case DISTANCE_ERROR -> text("Error obtaining version information", NamedTextColor.YELLOW);
@@ -76,7 +77,7 @@ public class PaperVersionFetcher implements VersionFetcher {
             case DISTANCE_UNKNOWN -> text("Unknown version", NamedTextColor.YELLOW);
             default -> text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW)
                 .append(Component.newline())
-                .append(text("Download the new version at: ")
+                .append(text("Download the new version from our Discord: ")
                     .append(text(DOWNLOAD_PAGE, NamedTextColor.GOLD)
                         .hoverEvent(text("Click to open", NamedTextColor.WHITE))
                         .clickEvent(ClickEvent.openUrl(DOWNLOAD_PAGE))));
diff --git a/src/main/java/com/infernalsuite/aswm/AdvancedSlimePaper.java b/src/main/java/com/infernalsuite/aswm/AdvancedSlimePaper.java
new file mode 100644
index 0000000000000000000000000000000000000000..0cecc5259e62e7b95596953adf48e1935522b3c0
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/AdvancedSlimePaper.java
@@ -0,0 +1,252 @@
+package com.infernalsuite.aswm;
+
+import com.flowpowered.nbt.CompoundMap;
+import com.flowpowered.nbt.CompoundTag;
+import com.infernalsuite.aswm.api.SlimeNMSBridge;
+import com.infernalsuite.aswm.api.AdvancedSlimePaperAPI;
+import com.infernalsuite.aswm.api.events.LoadSlimeWorldEvent;
+import com.infernalsuite.aswm.api.exceptions.*;
+import com.infernalsuite.aswm.api.loaders.SlimeLoader;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.api.world.SlimeWorldInstance;
+import com.infernalsuite.aswm.api.world.properties.SlimePropertyMap;
+import com.infernalsuite.aswm.level.SlimeLevelInstance;
+import com.infernalsuite.aswm.serialization.anvil.AnvilImportData;
+import com.infernalsuite.aswm.serialization.anvil.AnvilWorldReader;
+import com.infernalsuite.aswm.serialization.slime.SlimeSerializer;
+import com.infernalsuite.aswm.serialization.slime.reader.SlimeWorldReaderRegistry;
+import com.infernalsuite.aswm.skeleton.SkeletonSlimeWorld;
+import com.infernalsuite.aswm.util.NmsUtil;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.spigotmc.AsyncCatcher;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.concurrent.locks.ReentrantLock;
+
+public class AdvancedSlimePaper implements AdvancedSlimePaperAPI {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(AdvancedSlimePaper.class);
+    private static final SlimeNMSBridge BRIDGE_INSTANCE = SlimeNMSBridge.instance();
+
+    private final Map<String, SlimeWorld> loadedWorlds = new ConcurrentHashMap<>();
+
+    private final ReentrantLock loadLock = new ReentrantLock(true);
+
+    static {
+        System.setProperty("org.slf4j.simpleLogger.showShortLogName", "true");
+    }
+
+    public static AdvancedSlimePaper instance() {
+        return (AdvancedSlimePaper) AdvancedSlimePaperAPI.instance();
+    }
+
+    @Override
+    public SlimeWorld readWorld(SlimeLoader loader, String worldName, boolean readOnly, SlimePropertyMap propertyMap) throws UnknownWorldException, IOException, CorruptedWorldException, NewerFormatException {
+        Objects.requireNonNull(loader, "Loader cannot be null");
+        Objects.requireNonNull(worldName, "World name cannot be null");
+        Objects.requireNonNull(propertyMap, "Properties cannot be null");
+
+        long start = System.currentTimeMillis();
+
+        LOGGER.info("Reading world {}.", worldName);
+        byte[] serializedWorld = loader.readWorld(worldName);
+
+        SlimeWorld slimeWorld = SlimeWorldReaderRegistry.readWorld(loader, worldName, serializedWorld, propertyMap, readOnly);
+        LOGGER.info("Applying datafixers for {}.", worldName);
+        SlimeWorld dataFixed = SlimeNMSBridge.instance().applyDataFixers(slimeWorld);
+
+        // If the dataFixed and slimeWorld are same, then no datafixers were applied
+        if (!readOnly && dataFixed != slimeWorld)
+            loader.saveWorld(worldName, SlimeSerializer.serialize(dataFixed)); // Write dataFixed world back to loader
+
+        LOGGER.info("World {} read in {}ms.", worldName, System.currentTimeMillis() - start);
+
+        return dataFixed;
+    }
+
+    @Override
+    public SlimeWorld loadWorld(SlimeWorld world, boolean callWorldLoadEvent) throws IllegalArgumentException {
+        Objects.requireNonNull(world, "SlimeWorld cannot be null");
+
+        if (Bukkit.getWorld(world.getName()) != null) {
+            throw new IllegalArgumentException("World " + world.getName() + " is already loaded");
+        }
+
+        SlimeWorld mirror;
+        this.loadLock.lock();
+        try {
+        LOGGER.info("Loading world {}...", world.getName());
+        long start = System.currentTimeMillis();
+
+        SlimeWorldInstance instance = BRIDGE_INSTANCE.loadInstance(world);
+        mirror = instance.getSlimeWorldMirror();
+
+        Bukkit.getPluginManager().callEvent(new LoadSlimeWorldEvent(mirror));
+        if (callWorldLoadEvent) {
+            Bukkit.getPluginManager().callEvent(new WorldLoadEvent(instance.getBukkitWorld()));
+        }
+
+        registerWorld(mirror);
+
+        LOGGER.info("World {} loaded in {}ms.", world.getName(), System.currentTimeMillis() - start);
+        } finally {
+            this.loadLock.unlock();
+        }
+        return mirror;
+    }
+
+    @Override
+    public boolean worldLoaded(SlimeWorld world) {
+        return loadedWorlds.containsKey(world.getName());
+    }
+
+    @Override
+    public void saveWorld(SlimeWorld world) throws IOException {
+        Objects.requireNonNull(world, "SlimeWorld cannot be null");
+        if (worldLoaded(world)) {
+            Future<?>[] future = new Future[1];
+
+            // This is not pretty, but we really need to hop onto the main thread
+            NmsUtil.runSyncAndWait(() -> {
+                World bukkitWorld = Bukkit.getWorld(world.getName());
+
+                ServerLevel level = ((CraftWorld) bukkitWorld).getHandle();
+                if (level instanceof SlimeLevelInstance slimeLevel) {
+                    future[0] = slimeLevel.save();
+                } else {
+                    // Shouldn't happen
+                    LOGGER.warn("ServerLevel based off of SlimeWorld is not an instance of SlimeLevelInstance. Falling back to default save method.");
+                    bukkitWorld.save();
+                }
+            });
+
+            if (future[0] != null) {
+                try {
+                    future[0].get();
+                } catch (InterruptedException exception) {
+                    throw new RuntimeException(exception);
+                } catch (ExecutionException e) {
+                    if (e.getCause() instanceof IOException ioException) {
+                        throw ioException;
+                    } else {
+                        throw new RuntimeException(e.getCause());
+                    }
+                }
+            }
+        } else {
+            LOGGER.info("Saving unloaded world {}...", world.getName());
+            Objects.requireNonNull(world.getLoader(), "World loader cannot be null");
+            long start = System.currentTimeMillis();
+
+            byte[] serializedWorld = SlimeSerializer.serialize(world);
+
+            long saveStart = System.currentTimeMillis();
+            world.getLoader().saveWorld(world.getName(), serializedWorld);
+
+            LOGGER.info("World {} serialized in {}ms and saved in {}ms.", world.getName(), saveStart - start, System.currentTimeMillis() - saveStart);
+        }
+
+    }
+
+    @Override
+    public SlimeWorld getLoadedWorld(String worldName) {
+        return loadedWorlds.get(worldName);
+    }
+
+    @Override
+    public List<SlimeWorld> getLoadedWorlds() {
+        return List.copyOf(loadedWorlds.values());
+    }
+
+    @Override
+    public SlimeWorld createEmptyWorld(String worldName, boolean readOnly, SlimePropertyMap propertyMap, SlimeLoader loader) {
+        Objects.requireNonNull(worldName, "World name cannot be null");
+        Objects.requireNonNull(propertyMap, "Properties cannot be null");
+
+        return new SkeletonSlimeWorld(worldName, loader, readOnly, new Long2ObjectOpenHashMap<>(0), new CompoundTag("", new CompoundMap()), propertyMap, BRIDGE_INSTANCE.getCurrentVersion());
+    }
+
+    @Override
+    public void migrateWorld(String worldName, SlimeLoader currentLoader, SlimeLoader newLoader) throws IOException, WorldAlreadyExistsException, UnknownWorldException {
+        Objects.requireNonNull(worldName, "World name cannot be null");
+        Objects.requireNonNull(currentLoader, "Current loader cannot be null");
+        Objects.requireNonNull(newLoader, "New loader cannot be null");
+
+        if (newLoader.worldExists(worldName)) {
+            throw new WorldAlreadyExistsException(worldName);
+        }
+
+        byte[] serializedWorld = currentLoader.readWorld(worldName);
+        newLoader.saveWorld(worldName, serializedWorld);
+        currentLoader.deleteWorld(worldName);
+    }
+
+    @Override
+    public SlimeWorld readVanillaWorld(File worldDir, String worldName, SlimeLoader loader) throws InvalidWorldException, WorldLoadedException, WorldTooBigException, IOException, WorldAlreadyExistsException {
+        Objects.requireNonNull(worldDir, "World directory cannot be null");
+        Objects.requireNonNull(worldName, "World name cannot be null");
+
+        if (loader != null && loader.worldExists(worldName)) {
+            throw new WorldAlreadyExistsException(worldName);
+        }
+
+        World bukkitWorld = Bukkit.getWorld(worldName);
+
+        if (bukkitWorld != null && BRIDGE_INSTANCE.getInstance(bukkitWorld) == null) {
+            throw new WorldLoadedException(worldDir.getName());
+        }
+
+        SlimeWorld world;
+
+        try {
+            world = AnvilWorldReader.INSTANCE.readFromData(new AnvilImportData(worldDir, worldName, loader));
+        } catch (RuntimeException e) {
+            if (e.getCause() == null) {
+                throw e;
+            }
+            if (e.getCause() instanceof IOException ioException) {
+                throw ioException;
+            } else if (e.getCause() instanceof InvalidWorldException invalidWorldException) {
+                throw invalidWorldException;
+            } else {
+                throw e;
+            }
+        }
+
+        // A sanity check to make sure the world is not too big to be serialized
+        try {
+            SlimeSerializer.serialize(world);
+        } catch (IndexOutOfBoundsException ex) {
+            throw new WorldTooBigException(worldDir.getName());
+        }
+
+        return world;
+    }
+
+    /**
+     * Utility method to register a <b>loaded</b> {@link SlimeWorld} with the internal map (for {@link #getLoadedWorld} calls)
+     *
+     * @param world the world to register
+     */
+    private void registerWorld(SlimeWorld world) {
+        this.loadedWorlds.put(world.getName(), world);
+    }
+
+    public void onWorldUnload(String name) {
+        this.loadedWorlds.remove(name);
+    }
+}
diff --git a/src/main/java/com/infernalsuite/aswm/Converter.java b/src/main/java/com/infernalsuite/aswm/Converter.java
new file mode 100644
index 0000000000000000000000000000000000000000..7d1753c0b7e89bbf0c245a0231b62773eca2779e
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/Converter.java
@@ -0,0 +1,118 @@
+package com.infernalsuite.aswm;
+        
+import com.flowpowered.nbt.CompoundMap;
+import com.flowpowered.nbt.TagType;
+import com.infernalsuite.aswm.api.utils.NibbleArray;
+import net.minecraft.nbt.*;
+import net.minecraft.world.level.chunk.DataLayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Converter {
+
+    private static final Logger LOGGER = LogManager.getLogger("SWM Converter");
+
+    static DataLayer convertArray(NibbleArray array) {
+        return new DataLayer(array.getBacking());
+    }
+
+    public static NibbleArray convertArray(DataLayer array) {
+        if(array == null) {
+            return null;
+        }
+
+        return new NibbleArray(array.getData());
+    }
+
+    public static Tag convertTag(com.flowpowered.nbt.Tag tag) {
+        try {
+            switch(tag.getType()) {
+                case TAG_BYTE:
+                    return ByteTag.valueOf(((com.flowpowered.nbt.ByteTag) tag).getValue());
+                case TAG_SHORT:
+                    return ShortTag.valueOf(((com.flowpowered.nbt.ShortTag) tag).getValue());
+                case TAG_INT:
+                    return IntTag.valueOf(((com.flowpowered.nbt.IntTag) tag).getValue());
+                case TAG_LONG:
+                    return LongTag.valueOf(((com.flowpowered.nbt.LongTag) tag).getValue());
+                case TAG_FLOAT:
+                    return FloatTag.valueOf(((com.flowpowered.nbt.FloatTag) tag).getValue());
+                case TAG_DOUBLE:
+                    return DoubleTag.valueOf(((com.flowpowered.nbt.DoubleTag) tag).getValue());
+                case TAG_BYTE_ARRAY:
+                    return new ByteArrayTag(((com.flowpowered.nbt.ByteArrayTag) tag).getValue());
+                case TAG_STRING:
+                    return StringTag.valueOf(((com.flowpowered.nbt.StringTag) tag).getValue());
+                case TAG_LIST:
+                    ListTag list = new ListTag();
+                    ((com.flowpowered.nbt.ListTag<?>) tag).getValue().stream().map(Converter::convertTag).forEach(list::add);
+
+                    return list;
+                case TAG_COMPOUND:
+                    CompoundTag compound = new CompoundTag();
+
+                    ((com.flowpowered.nbt.CompoundTag) tag).getValue().forEach((key, value) -> compound.put(key, convertTag(value)));
+                    return compound;
+                case TAG_INT_ARRAY:
+                    return new IntArrayTag(((com.flowpowered.nbt.IntArrayTag) tag).getValue());
+                case TAG_LONG_ARRAY:
+                    return new LongArrayTag(((com.flowpowered.nbt.LongArrayTag) tag).getValue());
+                default:
+                    throw new IllegalArgumentException("Invalid tag type " + tag.getType().name());
+            }
+        } catch(Exception ex) {
+            LOGGER.error("Failed to convert NBT object:");
+            LOGGER.error(tag.toString());
+
+            throw ex;
+        }
+    }
+
+    public static com.flowpowered.nbt.Tag convertTag(String name, Tag base) {
+        switch(base.getId()) {
+            case Tag.TAG_BYTE:
+                return new com.flowpowered.nbt.ByteTag(name, ((ByteTag) base).getAsByte());
+            case Tag.TAG_SHORT:
+                return new com.flowpowered.nbt.ShortTag(name, ((ShortTag) base).getAsShort());
+            case Tag.TAG_INT:
+                return new com.flowpowered.nbt.IntTag(name, ((IntTag) base).getAsInt());
+            case Tag.TAG_LONG:
+                return new com.flowpowered.nbt.LongTag(name, ((LongTag) base).getAsLong());
+            case Tag.TAG_FLOAT:
+                return new com.flowpowered.nbt.FloatTag(name, ((FloatTag) base).getAsFloat());
+            case Tag.TAG_DOUBLE:
+                return new com.flowpowered.nbt.DoubleTag(name, ((DoubleTag) base).getAsDouble());
+            case Tag.TAG_BYTE_ARRAY:
+                return new com.flowpowered.nbt.ByteArrayTag(name, ((ByteArrayTag) base).getAsByteArray());
+            case Tag.TAG_STRING:
+                return new com.flowpowered.nbt.StringTag(name, ((StringTag) base).getAsString());
+            case Tag.TAG_LIST:
+                List<com.flowpowered.nbt.Tag> list = new ArrayList<>();
+                ListTag originalList = ((ListTag) base);
+
+                for(Tag entry : originalList) {
+                    list.add(convertTag("", entry));
+                }
+
+                return new com.flowpowered.nbt.ListTag(name, TagType.getById(originalList.getElementType()), list);
+            case Tag.TAG_COMPOUND:
+                CompoundTag originalCompound = ((CompoundTag) base);
+                com.flowpowered.nbt.CompoundTag compound = new com.flowpowered.nbt.CompoundTag(name, new CompoundMap());
+
+                for(String key : originalCompound.getAllKeys()) {
+                    compound.getValue().put(key, convertTag(key, originalCompound.get(key)));
+                }
+
+                return compound;
+            case Tag.TAG_INT_ARRAY:
+                return new com.flowpowered.nbt.IntArrayTag(name, ((IntArrayTag) base).getAsIntArray());
+            case Tag.TAG_LONG_ARRAY:
+                return new com.flowpowered.nbt.LongArrayTag(name, ((LongArrayTag) base).getAsLongArray());
+            default:
+                throw new IllegalArgumentException("Invalid tag type " + base.getId());
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/InternalPlugin.java b/src/main/java/com/infernalsuite/aswm/InternalPlugin.java
new file mode 100644
index 0000000000000000000000000000000000000000..875960d0c9fdcbcb3250abc05cfbde48eec0f15a
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/InternalPlugin.java
@@ -0,0 +1,159 @@
+package com.infernalsuite.aswm;
+
+import io.papermc.paper.plugin.lifecycle.event.LifecycleEventManager;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Server;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.generator.BiomeProvider;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginBase;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.PluginLoader;
+import org.bukkit.plugin.PluginLogger;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.logging.LogRecord;
+import java.io.File;
+import java.io.InputStream;
+import java.util.List;
+
+public class InternalPlugin extends PluginBase {
+    private boolean enabled = true;
+
+    private final String pluginName;
+    private PluginDescriptionFile pdf;
+
+    public InternalPlugin() {
+        this.pluginName = "Minecraft";
+        pdf = new PluginDescriptionFile(pluginName, "1.0", "nms");
+    }
+
+    @Override
+    public @NotNull Server getServer() {
+        return MinecraftServer.getServer().server;
+    }
+
+    @Override
+    public @NotNull PluginLogger getLogger() {
+        return new PluginLogger(new InternalPlugin()) {
+            @Override
+            public void log(@NotNull LogRecord logRecord) {
+                MinecraftServer.LOGGER.info(logRecord.getMessage());
+            }
+        };
+    }
+
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    @Override
+    public File getDataFolder() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public PluginDescriptionFile getDescription() {
+        return pdf;
+    }
+    // Paper start
+    @Override
+    public io.papermc.paper.plugin.configuration.PluginMeta getPluginMeta() {
+        return pdf;
+    }
+    // Paper end
+
+    @Override
+    public FileConfiguration getConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public InputStream getResource(String filename) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveDefaultConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveResource(String resourcePath, boolean replace) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void reloadConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public PluginLoader getPluginLoader() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    @Override
+    public void onDisable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void onLoad() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void onEnable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean isNaggable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void setNaggable(boolean canNag) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public @Nullable BiomeProvider getDefaultBiomeProvider(@NotNull String worldName, @Nullable String id) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public LifecycleEventManager<Plugin> getLifecycleManager() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/SimpleDataFixerConverter.java b/src/main/java/com/infernalsuite/aswm/SimpleDataFixerConverter.java
new file mode 100644
index 0000000000000000000000000000000000000000..26a299e742758b4f4a272753584f8b1b6c96569f
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/SimpleDataFixerConverter.java
@@ -0,0 +1,112 @@
+package com.infernalsuite.aswm;
+
+import ca.spottedleaf.dataconverter.converters.DataConverter;
+import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
+import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
+import ca.spottedleaf.dataconverter.types.nbt.NBTMapType;
+import com.flowpowered.nbt.CompoundTag;
+import com.infernalsuite.aswm.serialization.SlimeWorldReader;
+import com.infernalsuite.aswm.skeleton.SkeletonSlimeWorld;
+import com.infernalsuite.aswm.skeleton.SlimeChunkSectionSkeleton;
+import com.infernalsuite.aswm.skeleton.SlimeChunkSkeleton;
+import com.infernalsuite.aswm.api.world.SlimeChunk;
+import com.infernalsuite.aswm.api.world.SlimeChunkSection;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import net.minecraft.SharedConstants;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Consumer;
+
+class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
+
+    @Override
+    public SlimeWorld readFromData(SlimeWorld data) {
+        int newVersion = SharedConstants.getCurrentVersion().getDataVersion().getVersion();
+        int currentVersion = data.getDataVersion();
+        // Already fixed
+        if (currentVersion == newVersion) {
+            return data;
+        }
+
+        long encodedNewVersion = DataConverter.encodeVersions(newVersion, Integer.MAX_VALUE);
+        long encodedCurrentVersion = DataConverter.encodeVersions(currentVersion, Integer.MAX_VALUE);
+
+        Long2ObjectMap<SlimeChunk> chunks = new Long2ObjectOpenHashMap<>();
+        for (SlimeChunk chunk : data.getChunkStorage()) {
+            List<CompoundTag> entities = new ArrayList<>();
+            List<CompoundTag> blockEntities = new ArrayList<>();
+            for (CompoundTag upgradeEntity : chunk.getTileEntities()) {
+                blockEntities.add(
+                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.TILE_ENTITY.convert(new NBTMapType(tag), encodedCurrentVersion, encodedNewVersion))
+                );
+            }
+            for (CompoundTag upgradeEntity : chunk.getEntities()) {
+                entities.add(
+                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.ENTITY.convert(new NBTMapType(tag), encodedCurrentVersion, encodedNewVersion))
+                );
+            }
+
+            long chunkPos = Util.chunkPosition(chunk.getX(), chunk.getZ());
+
+            SlimeChunkSection[] sections = new SlimeChunkSection[chunk.getSections().length];
+            for (int i = 0; i < sections.length; i++) {
+                SlimeChunkSection dataSection = chunk.getSections()[i];
+                if (dataSection == null) continue;
+
+                CompoundTag blockStateTag = blockStateTag = convertAndBack(dataSection.getBlockStatesTag(), (tag) -> {
+                    WalkerUtils.convertList(MCTypeRegistry.BLOCK_STATE, new NBTMapType(tag), "palette", encodedCurrentVersion, encodedNewVersion);
+                });
+
+                CompoundTag biomeTag = convertAndBack(dataSection.getBiomeTag(), (tag) -> {
+                    WalkerUtils.convertList(MCTypeRegistry.BIOME, new NBTMapType(tag), "palette", encodedCurrentVersion, encodedNewVersion);
+                });
+
+                sections[i] = new SlimeChunkSectionSkeleton(
+                        blockStateTag,
+                        biomeTag,
+                        dataSection.getBlockLight(),
+                        dataSection.getSkyLight()
+                );
+            }
+
+            chunks.put(chunkPos, new SlimeChunkSkeleton(
+                    chunk.getX(),
+                    chunk.getZ(),
+                    sections,
+                    chunk.getHeightMaps(),
+                    blockEntities,
+                    entities,
+                    chunk.getExtraData(),
+                    chunk.getUpgradeData()
+            ));
+
+        }
+
+        return new SkeletonSlimeWorld(
+                data.getName(),
+                data.getLoader(),
+                data.isReadOnly(),
+                chunks,
+                data.getExtraData(),
+                data.getPropertyMap(),
+                newVersion
+        );
+    }
+
+
+    private static CompoundTag convertAndBack(CompoundTag value, Consumer<net.minecraft.nbt.CompoundTag> acceptor) {
+        if (value == null) {
+            return null;
+        }
+
+        net.minecraft.nbt.CompoundTag converted = (net.minecraft.nbt.CompoundTag) Converter.convertTag(value);
+        acceptor.accept(converted);
+
+        return (CompoundTag) Converter.convertTag(value.getName(), converted);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..87b6ee19fd165bde2db3a57545c58251dc6bad22
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
@@ -0,0 +1,259 @@
+package com.infernalsuite.aswm;
+
+import ca.spottedleaf.dataconverter.converters.DataConverter;
+import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
+import ca.spottedleaf.dataconverter.types.nbt.NBTMapType;
+import com.flowpowered.nbt.CompoundMap;
+import com.infernalsuite.aswm.api.SlimeNMSBridge;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.api.world.SlimeWorldInstance;
+import com.infernalsuite.aswm.api.world.properties.SlimeProperties;
+import com.infernalsuite.aswm.level.SlimeBootstrap;
+import com.infernalsuite.aswm.level.SlimeInMemoryWorld;
+import com.infernalsuite.aswm.level.SlimeLevelInstance;
+import com.mojang.serialization.Lifecycle;
+import net.minecraft.SharedConstants;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.DedicatedServerProperties;
+import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelSettings;
+import net.minecraft.world.level.dimension.LevelStem;
+import net.minecraft.world.level.levelgen.WorldOptions;
+import net.minecraft.world.level.storage.CommandStorage;
+import net.minecraft.world.level.storage.DimensionDataStorage;
+import net.minecraft.world.level.storage.PrimaryLevelData;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.IOException;
+import java.util.Locale;
+import java.util.Map;
+
+public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
+
+    private static final CraftPersistentDataTypeRegistry REGISTRY = new CraftPersistentDataTypeRegistry();
+    private static final SimpleDataFixerConverter DATA_FIXER_CONVERTER = new SimpleDataFixerConverter();
+
+    private SlimeWorld defaultWorld;
+    private SlimeWorld defaultNetherWorld;
+    private SlimeWorld defaultEndWorld;
+
+    public static SlimeNMSBridgeImpl instance() {
+        return (SlimeNMSBridgeImpl) SlimeNMSBridge.instance();
+    }
+
+    @Override
+    public void extractCraftPDC(PersistentDataContainer source, CompoundMap target) {
+        if (source instanceof CraftPersistentDataContainer craftPDC) {
+            for (Map.Entry<String, Tag> entry : craftPDC.getRaw().entrySet()) {
+                target.put(Converter.convertTag(entry.getKey(), entry.getValue()));
+            }
+        } else {
+            throw new IllegalArgumentException("PersistentDataContainer is not a CraftPersistentDataContainer");
+        }
+    }
+
+    @Override
+    public PersistentDataContainer extractCompoundMapIntoCraftPDC(CompoundMap source) {
+        var container = new CraftPersistentDataContainer(REGISTRY);
+        for (Map.Entry<String, com.flowpowered.nbt.Tag<?>> entry : source.entrySet()) {
+            container.put(entry.getKey(), Converter.convertTag(entry.getValue()));
+        }
+        return container;
+    }
+
+    @Override
+    public com.flowpowered.nbt.CompoundTag convertChunkTo1_13(com.flowpowered.nbt.CompoundTag tag) {
+        CompoundTag converted = (CompoundTag) Converter.convertTag(tag);
+
+        int version = converted.getInt("DataVersion");
+
+        long encodedNewVersion = DataConverter.encodeVersions(1624, Integer.MAX_VALUE);
+        long encodedCurrentVersion = DataConverter.encodeVersions(version, Integer.MAX_VALUE);
+
+        MCTypeRegistry.CHUNK.convert(new NBTMapType(converted), encodedCurrentVersion, encodedNewVersion);
+
+        return (com.flowpowered.nbt.CompoundTag) Converter.convertTag(tag.getName(), converted);
+    }
+
+    @Override
+    public boolean loadOverworldOverride() {
+        if (defaultWorld == null) {
+            return false;
+        }
+
+        // See MinecraftServer loading logic
+        // Some stuff is needed when loading overworld world
+        SlimeLevelInstance instance = ((SlimeInMemoryWorld) this.loadInstance(defaultWorld, Level.OVERWORLD)).getInstance();
+        DimensionDataStorage worldpersistentdata = instance.getDataStorage();
+        instance.getCraftServer().scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(instance.getServer(), instance.getScoreboard());
+        instance.getServer().commandStorage = new CommandStorage(worldpersistentdata);
+
+        return true;
+    }
+
+    @Override
+    public boolean loadNetherOverride() {
+        if (defaultNetherWorld == null) {
+            return false;
+        }
+
+        this.loadInstance(defaultNetherWorld, Level.NETHER);
+
+        return true;
+    }
+
+    @Override
+    public boolean loadEndOverride() {
+        if (defaultEndWorld == null) {
+            return false;
+        }
+
+        this.loadInstance(defaultEndWorld, Level.END);
+
+        return true;
+    }
+
+    /**
+     * Sets the default worlds for the server.<br>
+     * <b>NOTE: These worlds should be unloaded!</b>
+     * @param normalWorld The default overworld
+     * @param netherWorld The default nether
+     * @param endWorld The default end
+     */
+    @Override
+    public void setDefaultWorlds(SlimeWorld normalWorld, SlimeWorld netherWorld, SlimeWorld endWorld) {
+        if (normalWorld != null) {
+            normalWorld.getPropertyMap().setValue(SlimeProperties.ENVIRONMENT, World.Environment.NORMAL.toString().toLowerCase());
+            defaultWorld = normalWorld;
+        }
+
+        if (netherWorld != null) {
+            netherWorld.getPropertyMap().setValue(SlimeProperties.ENVIRONMENT, World.Environment.NETHER.toString().toLowerCase());
+            defaultNetherWorld = netherWorld;
+        }
+
+        if (endWorld != null) {
+            endWorld.getPropertyMap().setValue(SlimeProperties.ENVIRONMENT, World.Environment.THE_END.toString().toLowerCase());
+            defaultEndWorld = endWorld;
+        }
+
+    }
+
+    @Override
+    public SlimeWorldInstance loadInstance(SlimeWorld slimeWorld) {
+        return this.loadInstance(slimeWorld, null);
+    }
+
+    public SlimeWorldInstance loadInstance(SlimeWorld slimeWorld, @Nullable ResourceKey<Level> dimensionOverride) {
+        String worldName = slimeWorld.getName();
+
+        if (Bukkit.getWorld(worldName) != null) {
+            throw new IllegalArgumentException("World " + worldName + " already exists! Maybe it's an outdated SlimeWorld object?");
+        }
+
+        SlimeLevelInstance server = createCustomWorld(slimeWorld, dimensionOverride);
+        registerWorld(server);
+        return server.getSlimeInstance();
+    }
+
+    @Override
+    public SlimeWorldInstance getInstance(World world) {
+        CraftWorld craftWorld = (CraftWorld) world;
+
+        if (!(craftWorld.getHandle() instanceof SlimeLevelInstance worldServer)) {
+            return null;
+        }
+
+        return worldServer.getSlimeInstance();
+    }
+
+    @Override
+    public SlimeWorld applyDataFixers(SlimeWorld world) {
+        return DATA_FIXER_CONVERTER.readFromData(world);
+    }
+
+    @Override
+    public int getCurrentVersion() {
+        return SharedConstants.getCurrentVersion().getDataVersion().getVersion();
+    }
+
+    public void registerWorld(SlimeLevelInstance server) {
+        MinecraftServer mcServer = MinecraftServer.getServer();
+        mcServer.initWorld(server, server.serverLevelData, mcServer.getWorldData(), server.serverLevelData.worldGenOptions());
+
+        mcServer.addLevel(server);
+    }
+
+    private SlimeLevelInstance createCustomWorld(SlimeWorld world, @Nullable ResourceKey<Level> dimensionOverride) {
+        SlimeBootstrap bootstrap = new SlimeBootstrap(world);
+        String worldName = world.getName();
+
+        PrimaryLevelData worldDataServer = createWorldData(world);
+        World.Environment environment = getEnvironment(world);
+        ResourceKey<LevelStem> dimension = switch (environment) {
+            case NORMAL -> LevelStem.OVERWORLD;
+            case NETHER -> LevelStem.NETHER;
+            case THE_END -> LevelStem.END;
+            default -> throw new IllegalArgumentException("Unknown dimension supplied");
+        };
+
+        ResourceKey<Level> worldKey = dimensionOverride == null ? ResourceKey.create(Registries.DIMENSION, ResourceLocation.parse(worldName.toLowerCase(Locale.ENGLISH))) : dimensionOverride;
+        LevelStem stem = MinecraftServer.getServer().registries().compositeAccess().registryOrThrow(Registries.LEVEL_STEM).get(dimension);
+
+        SlimeLevelInstance level;
+
+        try {
+            level = new SlimeLevelInstance(bootstrap, worldDataServer, worldKey, dimension, stem, environment);
+        } catch (IOException ex) {
+            throw new RuntimeException(ex); // TODO do something better with this?
+        }
+
+        // level.setReady(true);
+        level.setSpawnSettings(world.getPropertyMap().getValue(SlimeProperties.ALLOW_MONSTERS), world.getPropertyMap().getValue(SlimeProperties.ALLOW_ANIMALS));
+
+        var nmsExtraData = (CompoundTag) Converter.convertTag(world.getExtraData());
+
+        //Attempt to read PDC
+        if (nmsExtraData.get("BukkitValues") != null) level.getWorld().readBukkitValues(nmsExtraData.get("BukkitValues"));
+
+        return level;
+    }
+
+    private World.Environment getEnvironment(SlimeWorld world) {
+        return World.Environment.valueOf(world.getPropertyMap().getValue(SlimeProperties.ENVIRONMENT).toUpperCase());
+    }
+
+    private PrimaryLevelData createWorldData(SlimeWorld world) {
+        MinecraftServer mcServer = MinecraftServer.getServer();
+        DedicatedServerProperties serverProps = ((DedicatedServer) mcServer).getProperties();
+        String worldName = world.getName();
+
+        LevelSettings worldsettings = new LevelSettings(worldName, serverProps.gamemode, false, serverProps.difficulty,
+                true, new GameRules(), mcServer.worldLoader.dataConfiguration());
+
+        WorldOptions worldoptions = new WorldOptions(0, false, false);
+
+        PrimaryLevelData data = new PrimaryLevelData(worldsettings, worldoptions, PrimaryLevelData.SpecialWorldProperty.FLAT, Lifecycle.stable());
+        data.checkName(worldName);
+        data.setModdedInfo(mcServer.getServerModName(), mcServer.getModdedStatus().shouldReportAsModified());
+        data.setInitialized(true);
+
+        return data;
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java b/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..b5a1f75314aac73fb77e139398017b16acbb8efb
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/ChunkDataLoadTask.java
@@ -0,0 +1,117 @@
+package com.infernalsuite.aswm.level;
+
+import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
+import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler;
+import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.task.ChunkLoadTask;
+import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.task.GenericDataLoadTask;
+import com.infernalsuite.aswm.Converter;
+import com.infernalsuite.aswm.api.world.SlimeChunk;
+import com.mojang.logging.LogUtils;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.ImposterProtoChunk;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.UpgradeData;
+import net.minecraft.world.level.material.Fluid;
+import net.minecraft.world.ticks.LevelChunkTicks;
+import org.slf4j.Logger;
+
+import java.util.function.Consumer;
+
+public final class ChunkDataLoadTask implements CommonLoadTask {
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    private final ChunkTaskScheduler scheduler;
+    private final ServerLevel world;
+    private final int chunkX;
+    private final int chunkZ;
+    private Consumer<GenericDataLoadTask.TaskResult<ChunkAccess, Throwable>> onRun;
+
+    private PrioritisedExecutor.PrioritisedTask task;
+
+    private final ChunkLoadTask chunkLoadTask;
+
+    protected ChunkDataLoadTask(ChunkLoadTask chunkLoadTask, final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX,
+                                final int chunkZ, final PrioritisedExecutor.Priority priority, final Consumer<GenericDataLoadTask.TaskResult<ChunkAccess, Throwable>> onRun) {
+        this.chunkLoadTask = chunkLoadTask;
+        this.scheduler = scheduler;
+        this.world = world;
+        this.chunkX = chunkX;
+        this.chunkZ = chunkZ;
+        this.onRun = onRun;
+
+        this.task = this.scheduler.createChunkTask(this.chunkX, this.chunkZ, () -> {
+            try {
+                SlimeChunk chunk = ((SlimeLevelInstance) this.world).slimeInstance.getChunk(this.chunkX, this.chunkZ);
+                this.onRun.accept(new GenericDataLoadTask.TaskResult<>(runOnMain(chunk), null));
+            } catch (final Exception e) {
+                LOGGER.error("ERROR", e);
+                this.onRun.accept(new GenericDataLoadTask.TaskResult<>(null, e));
+            }
+        }, priority);
+    }
+
+    private ChunkAccess getEmptyChunk() {
+        LevelChunkTicks<Block> blockLevelChunkTicks = new LevelChunkTicks<>();
+        LevelChunkTicks<Fluid> fluidLevelChunkTicks = new LevelChunkTicks<>();
+
+        return new ImposterProtoChunk(new LevelChunk(this.world, new ChunkPos(this.chunkX, this.chunkZ), UpgradeData.EMPTY, blockLevelChunkTicks, fluidLevelChunkTicks,
+                0L, null, chunk -> {}, null), true);
+    }
+
+    protected ChunkAccess runOnMain(final SlimeChunk data) {
+        // have tasks to run (at this point, it's just the POI consistency checking)
+        try {
+            //                if (data.tasks != null) {
+            //                    for (int i = 0, len = data.tasks.size(); i < len; i) {
+            //                        data.tasks.poll().run();
+            //                    }
+            //                }
+
+            LevelChunk chunk = this.world.slimeInstance.promote(chunkX, chunkZ, data);
+            ImposterProtoChunk protoChunk = new ImposterProtoChunk(chunk, false);
+            if (data != null) {
+                data.getEntities().stream().map(flowTag -> (CompoundTag) Converter.convertTag(flowTag)).forEach(protoChunk::addEntity);
+            }
+
+            return protoChunk;
+        } catch (final Exception e) {
+            LOGGER.error("Failed to parse main tasks for task {}, chunk data will be lost", this, e);
+            return this.getEmptyChunk();
+        }
+    }
+
+    @Override
+    public PrioritisedExecutor.Priority getPriority() {
+        return this.task.getPriority();
+    }
+
+    @Override
+    public void setPriority(PrioritisedExecutor.Priority priority) {
+        this.task.setPriority(priority);
+    }
+
+    @Override
+    public void raisePriority(PrioritisedExecutor.Priority priority) {
+        this.task.raisePriority(priority);
+    }
+
+    @Override
+    public void lowerPriority(PrioritisedExecutor.Priority priority) {
+        this.task.lowerPriority(priority);
+    }
+
+    @Override
+    public boolean cancel() {
+        return this.task.cancel();
+    }
+
+    public boolean schedule(boolean schedule) {
+        this.scheduler.scheduleChunkTask(chunkX, chunkZ, this.task::execute);
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/CommonLoadTask.java b/src/main/java/com/infernalsuite/aswm/level/CommonLoadTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc6e46972bcc77134ed718c8c157ec3893d4bcdf
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/CommonLoadTask.java
@@ -0,0 +1,18 @@
+package com.infernalsuite.aswm.level;
+
+import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
+
+public interface CommonLoadTask {
+
+    boolean schedule(boolean schedule);
+
+    PrioritisedExecutor.Priority getPriority();
+
+    boolean cancel();
+
+    void lowerPriority(PrioritisedExecutor.Priority priority);
+
+    void raisePriority(PrioritisedExecutor.Priority priority);
+
+    void setPriority(PrioritisedExecutor.Priority priority);
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/FastChunkPruner.java b/src/main/java/com/infernalsuite/aswm/level/FastChunkPruner.java
new file mode 100644
index 0000000000000000000000000000000000000000..0f4de8602c3b897e4eb7246951a1a1db646c59fa
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/FastChunkPruner.java
@@ -0,0 +1,59 @@
+package com.infernalsuite.aswm.level;
+
+import ca.spottedleaf.moonrise.patches.chunk_system.level.entity.ChunkEntitySlices;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.api.world.properties.SlimeProperties;
+import com.infernalsuite.aswm.api.world.properties.SlimePropertyMap;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.LevelChunkSection;
+
+public class FastChunkPruner {
+
+    public static boolean canBePruned(SlimeWorld world, LevelChunk chunk) {
+        // Kenox <muranelp@gmail.com>
+        // It's not safe to assume that the chunk can be pruned
+        // if there isn't a loaded chunk there
+        if (chunk == null) {
+            return false;
+        }
+
+        SlimePropertyMap propertyMap = world.getPropertyMap();
+        if (propertyMap.getValue(SlimeProperties.SHOULD_LIMIT_SAVE)) {
+            int minX = propertyMap.getValue(SlimeProperties.SAVE_MIN_X);
+            int maxX = propertyMap.getValue(SlimeProperties.SAVE_MAX_X);
+
+            int minZ = propertyMap.getValue(SlimeProperties.SAVE_MIN_Z);
+            int maxZ = propertyMap.getValue(SlimeProperties.SAVE_MAX_Z);
+
+            int chunkX = chunk.locX;
+            int chunkZ = chunk.locZ;
+
+            if (chunkX < minX || chunkX > maxX) {
+                return true;
+            }
+
+            if (chunkZ < minZ || chunkZ > maxZ) {
+                return true;
+            }
+        }
+
+        String pruningSetting = world.getPropertyMap().getValue(SlimeProperties.CHUNK_PRUNING);
+        if (pruningSetting.equals("aggressive")) {
+            ChunkEntitySlices slices = chunk.getChunkHolder().getEntityChunk();
+
+            return chunk.blockEntities.isEmpty() && (slices == null || slices.isEmpty()) && areSectionsEmpty(chunk);
+        }
+
+        return false;
+    }
+
+    private static boolean areSectionsEmpty(LevelChunk chunk) {
+        for (LevelChunkSection section : chunk.getSections()) {
+            if (!section.hasOnlyAir()) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/NMSSlimeChunk.java b/src/main/java/com/infernalsuite/aswm/level/NMSSlimeChunk.java
new file mode 100644
index 0000000000000000000000000000000000000000..9b4b18758d52d66e4abf9e40e49a32428de68b9a
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/NMSSlimeChunk.java
@@ -0,0 +1,213 @@
+package com.infernalsuite.aswm.level;
+
+import ca.spottedleaf.moonrise.patches.chunk_system.level.entity.ChunkEntitySlices;
+import com.flowpowered.nbt.CompoundMap;
+import com.flowpowered.nbt.CompoundTag;
+import com.flowpowered.nbt.LongArrayTag;
+import com.google.common.collect.Lists;
+import com.infernalsuite.aswm.Converter;
+import com.infernalsuite.aswm.api.utils.NibbleArray;
+import com.infernalsuite.aswm.api.world.SlimeChunk;
+import com.infernalsuite.aswm.api.world.SlimeChunkSection;
+import com.infernalsuite.aswm.skeleton.SlimeChunkSectionSkeleton;
+import com.mojang.serialization.Codec;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.core.SectionPos;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.LightLayer;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.LevelChunkSection;
+import net.minecraft.world.level.chunk.PalettedContainer;
+import net.minecraft.world.level.chunk.PalettedContainerRO;
+import net.minecraft.world.level.chunk.storage.ChunkSerializer;
+import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.lighting.LevelLightEngine;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+public class NMSSlimeChunk implements SlimeChunk {
+    private static final Logger LOGGER = LoggerFactory.getLogger(NMSSlimeChunk.class);
+
+    private static final CompoundTag EMPTY_BLOCK_STATE_PALETTE;
+    private static final CompoundTag EMPTY_BIOME_PALETTE;
+
+    // Optimized empty section serialization
+    static {
+        {
+            PalettedContainer<BlockState> empty = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, null);
+            Tag tag = ChunkSerializer.BLOCK_STATE_CODEC.encodeStart(NbtOps.INSTANCE, empty).getOrThrow();
+
+            EMPTY_BLOCK_STATE_PALETTE = (CompoundTag) Converter.convertTag("", tag);
+        }
+        {
+            Registry<Biome> biomes = net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME);
+            PalettedContainer<Holder<Biome>> empty = new PalettedContainer<>(biomes.asHolderIdMap(), biomes.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null);
+            Tag tag = ChunkSerializer.makeBiomeCodec(biomes).encodeStart(NbtOps.INSTANCE, empty).getOrThrow();
+
+            EMPTY_BIOME_PALETTE = (CompoundTag) Converter.convertTag("", tag);
+        }
+    }
+
+    private LevelChunk chunk;
+    private final CompoundTag extra;
+    private final CompoundTag upgradeData;
+
+    public NMSSlimeChunk(LevelChunk chunk, SlimeChunk reference) {
+        this.chunk = chunk;
+        this.extra = reference == null ? new CompoundTag("", new CompoundMap()) : reference.getExtraData();
+        this.upgradeData = reference == null ? null : reference.getUpgradeData();
+    }
+
+    @Override
+    public int getX() {
+        return chunk.getPos().x;
+    }
+
+    @Override
+    public int getZ() {
+        return chunk.getPos().z;
+    }
+
+    @Override
+    public SlimeChunkSection[] getSections() {
+        SlimeChunkSection[] sections = new SlimeChunkSection[this.chunk.getSectionsCount()];
+        LevelLightEngine lightEngine = chunk.getLevel().getChunkSource().getLightEngine();
+
+        Registry<Biome> biomeRegistry = chunk.getLevel().registryAccess().registryOrThrow(Registries.BIOME);
+
+        // Ignore deprecation, spigot only method
+        Codec<PalettedContainerRO<Holder<Biome>>> codec = PalettedContainer.codecRO(biomeRegistry.asHolderIdMap(), biomeRegistry.holderByNameCodec(), PalettedContainer.Strategy.SECTION_BIOMES, biomeRegistry.getHolderOrThrow(Biomes.PLAINS));
+
+        for (int sectionId = 0; sectionId < chunk.getSections().length; sectionId++) {
+            LevelChunkSection section = chunk.getSections()[sectionId];
+            // Sections CANNOT be null in 1.18
+
+            // Block Light Nibble Array
+            NibbleArray blockLightArray = Converter.convertArray(lightEngine.getLayerListener(LightLayer.BLOCK).getDataLayerData(SectionPos.of(chunk.getPos(), sectionId)));
+
+            // Sky light Nibble Array
+            NibbleArray skyLightArray = Converter.convertArray(lightEngine.getLayerListener(LightLayer.SKY).getDataLayerData(SectionPos.of(chunk.getPos(), sectionId)));
+
+            // Tile/Entity Data
+
+            // Block Data
+            CompoundTag blockStateTag;
+            if (section.hasOnlyAir()) {
+                blockStateTag = EMPTY_BLOCK_STATE_PALETTE;
+            } else {
+                Tag data = ChunkSerializer.BLOCK_STATE_CODEC.encodeStart(NbtOps.INSTANCE, section.getStates()).getOrThrow(); // todo error handling
+                blockStateTag = (CompoundTag) Converter.convertTag("", data);
+            }
+
+
+            CompoundTag biomeTag;
+            PalettedContainer<Holder<Biome>> biomes = (PalettedContainer<Holder<Biome>>) section.getBiomes();
+            if (biomes.data.palette().getSize() == 1 && biomes.data.palette().maybeHas((h) -> h.is(Biomes.PLAINS))) {
+                biomeTag = EMPTY_BIOME_PALETTE;
+            } else {
+                Tag biomeData = codec.encodeStart(NbtOps.INSTANCE, section.getBiomes()).getOrThrow(); // todo error handling
+                biomeTag = (CompoundTag) Converter.convertTag("", biomeData);
+            }
+
+            sections[sectionId] = new SlimeChunkSectionSkeleton(blockStateTag, biomeTag, blockLightArray, skyLightArray);
+        }
+
+        return sections;
+    }
+
+    @Override
+    public CompoundTag getHeightMaps() {
+        // HeightMap
+        CompoundMap heightMaps = new CompoundMap();
+
+        for (Map.Entry<Heightmap.Types, Heightmap> entry : chunk.heightmaps.entrySet()) {
+            if (!entry.getKey().keepAfterWorldgen()) {
+                continue;
+            }
+
+            Heightmap.Types type = entry.getKey();
+            Heightmap map = entry.getValue();
+
+            heightMaps.put(type.name(), new LongArrayTag(type.name(), map.getRawData()));
+        }
+
+        return new CompoundTag("", heightMaps);
+    }
+
+    @Override
+    public List<CompoundTag> getTileEntities() {
+        List<net.minecraft.nbt.CompoundTag> tileEntities = new ArrayList<>();
+
+        for (BlockEntity entity : chunk.blockEntities.values()) {
+            net.minecraft.nbt.CompoundTag entityNbt = entity.saveWithFullMetadata(net.minecraft.server.MinecraftServer.getServer().registryAccess());
+            tileEntities.add(entityNbt);
+        }
+
+        return Lists.transform(tileEntities, (compound) -> {
+            return (CompoundTag) Converter.convertTag("", compound);
+        });
+    }
+
+    @Override
+    public List<CompoundTag> getEntities() {
+        List<net.minecraft.nbt.CompoundTag> entities = new ArrayList<>();
+
+        if(this.chunk == null || this.chunk.getChunkHolder() == null) {
+            return new ArrayList<>();
+        }
+
+        ChunkEntitySlices slices = this.chunk.getChunkHolder().getEntityChunk();
+        if (slices == null) {
+            return new ArrayList<>();
+        }
+
+        // Work by <gunther@gameslabs.net>
+        for (Entity entity : slices.entities) {
+            net.minecraft.nbt.CompoundTag entityNbt = new net.minecraft.nbt.CompoundTag();
+            try {
+                if (entity.save(entityNbt)) {
+                    entities.add(entityNbt);
+                }
+            } catch (Exception e) {
+                LOGGER.error("Could not save the entity = {}, exception = {}", entity, e);
+            }
+        }
+
+        return Lists.transform(entities, (compound) -> {
+            return (CompoundTag) Converter.convertTag("", compound);
+        });
+    }
+
+    @Override
+    public CompoundTag getExtraData() {
+        return extra;
+    }
+
+    @Override
+    public CompoundTag getUpgradeData() {
+        return upgradeData;
+    }
+
+    public LevelChunk getChunk() {
+        return chunk;
+    }
+
+    public void setChunk(LevelChunk chunk) {
+        this.chunk = chunk;
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/NMSSlimeWorld.java b/src/main/java/com/infernalsuite/aswm/level/NMSSlimeWorld.java
new file mode 100644
index 0000000000000000000000000000000000000000..56c5db9a22af8ddd1d459bcf1f5b3fc7ca809b72
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/NMSSlimeWorld.java
@@ -0,0 +1,98 @@
+package com.infernalsuite.aswm.level;
+
+import com.flowpowered.nbt.CompoundTag;
+import com.infernalsuite.aswm.api.exceptions.WorldAlreadyExistsException;
+import com.infernalsuite.aswm.api.loaders.SlimeLoader;
+import com.infernalsuite.aswm.api.world.SlimeChunk;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.api.world.properties.SlimePropertyMap;
+import net.minecraft.SharedConstants;
+import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.world.level.chunk.LevelChunk;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.List;
+import java.util.Objects;
+import java.util.stream.Collectors;
+
+public class NMSSlimeWorld implements SlimeWorld {
+
+    private final SlimeInMemoryWorld memoryWorld;
+    private final SlimeLevelInstance instance;
+
+    public NMSSlimeWorld(SlimeInMemoryWorld memoryWorld) {
+        this.instance = memoryWorld.getInstance();
+        this.memoryWorld = memoryWorld;
+    }
+
+    @Override
+    public String getName() {
+        return this.instance.getMinecraftWorld().serverLevelData.getLevelName();
+    }
+
+    @Override
+    public SlimeLoader getLoader() {
+        return this.instance.slimeInstance.getLoader();
+    }
+
+    @Override
+    public SlimeChunk getChunk(int x, int z) {
+        LevelChunk chunk = this.instance.getChunkIfLoaded(x, z);
+        if (chunk == null) {
+            return null;
+        }
+
+        return new NMSSlimeChunk(chunk, memoryWorld.getChunk(x, z));
+    }
+
+    @Override
+    public Collection<SlimeChunk> getChunkStorage() {
+        List<ChunkHolder> chunks = ca.spottedleaf.moonrise.common.util.ChunkSystem.getVisibleChunkHolders(this.instance); // Paper
+        return chunks.stream().map(ChunkHolder::getFullChunkNow).filter(Objects::nonNull)
+                .map((chunkLevel) -> new NMSSlimeChunk(chunkLevel, memoryWorld.getChunk(chunkLevel.getPos().x, chunkLevel.getPos().z))) // This sucks, is there a better way?
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public CompoundTag getExtraData() {
+        return this.instance.slimeInstance.getExtraData();
+    }
+
+    @Override
+    public Collection<CompoundTag> getWorldMaps() {
+        return List.of();
+    }
+
+    @Override
+    public SlimePropertyMap getPropertyMap() {
+        return this.instance.slimeInstance.getPropertyMap();
+    }
+
+    @Override
+    public boolean isReadOnly() {
+        return this.getLoader() == null;
+    }
+
+    @Override
+    public SlimeWorld clone(String worldName) {
+        return this.memoryWorld.clone(worldName);
+    }
+
+    @Override
+    public SlimeWorld clone(String worldName, SlimeLoader loader) throws WorldAlreadyExistsException, IOException {
+        return this.memoryWorld.clone(worldName, loader);
+    }
+
+    @Override
+    public int getDataVersion() {
+        return SharedConstants.getCurrentVersion().getDataVersion().getVersion();
+    }
+
+    @Override
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
+        return memoryWorld.getPersistentDataContainer();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/SafeNmsChunkWrapper.java b/src/main/java/com/infernalsuite/aswm/level/SafeNmsChunkWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..f5da649f4914319229fdba014e1042abca62f835
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/SafeNmsChunkWrapper.java
@@ -0,0 +1,101 @@
+package com.infernalsuite.aswm.level;
+
+import com.flowpowered.nbt.CompoundTag;
+import com.infernalsuite.aswm.api.world.SlimeChunk;
+import com.infernalsuite.aswm.api.world.SlimeChunkSection;
+
+import java.util.List;
+
+public class SafeNmsChunkWrapper implements SlimeChunk {
+
+    private final NMSSlimeChunk wrapper;
+    private final SlimeChunk safety;
+
+    public SafeNmsChunkWrapper(NMSSlimeChunk wrapper, SlimeChunk safety) {
+        this.wrapper = wrapper;
+        this.safety = safety;
+    }
+
+    @Override
+    public int getX() {
+        return this.wrapper.getX();
+    }
+
+    @Override
+    public int getZ() {
+        return this.wrapper.getZ();
+    }
+
+    @Override
+    public SlimeChunkSection[] getSections() {
+        if (shouldDefaultBackToSlimeChunk()) {
+            return this.safety.getSections();
+        }
+
+        return this.wrapper.getSections();
+    }
+
+    @Override
+    public CompoundTag getHeightMaps() {
+        if (shouldDefaultBackToSlimeChunk()) {
+            return this.safety.getHeightMaps();
+        }
+
+        return this.wrapper.getHeightMaps();
+    }
+
+    @Override
+    public List<CompoundTag> getTileEntities() {
+        if (shouldDefaultBackToSlimeChunk()) {
+            return this.safety.getTileEntities();
+        }
+
+        return this.wrapper.getTileEntities();
+    }
+
+    @Override
+    public List<CompoundTag> getEntities() {
+        if (shouldDefaultBackToSlimeChunk()) {
+            return this.safety.getEntities();
+        }
+
+        return this.wrapper.getEntities();
+    }
+
+    @Override
+    public CompoundTag getExtraData() {
+        if (shouldDefaultBackToSlimeChunk()) {
+            return this.safety.getExtraData();
+        }
+
+        return this.wrapper.getExtraData();
+    }
+
+    @Override
+    public CompoundTag getUpgradeData() {
+        if (shouldDefaultBackToSlimeChunk()) {
+            return this.safety.getUpgradeData();
+        }
+
+        return this.wrapper.getUpgradeData();
+    }
+
+    /*
+Slime chunks can still be requested but not actually loaded, this caused
+some things to not properly save because they are not "loaded" into the chunk.
+See ChunkMap#protoChunkToFullChunk
+anything in the if statement will not be loaded and is stuck inside the runnable.
+Inorder to possibly not corrupt the state, simply refer back to the slime saved object.
+*/
+    public boolean shouldDefaultBackToSlimeChunk() {
+        return this.safety != null && !this.wrapper.getChunk().loaded;
+    }
+
+    public NMSSlimeChunk getWrapper() {
+        return wrapper;
+    }
+
+    public SlimeChunk getSafety() {
+        return safety;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeBootstrap.java b/src/main/java/com/infernalsuite/aswm/level/SlimeBootstrap.java
new file mode 100644
index 0000000000000000000000000000000000000000..8853088c5c6306511716bbffac9bf73c633b61bb
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeBootstrap.java
@@ -0,0 +1,8 @@
+package com.infernalsuite.aswm.level;
+
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+
+public record SlimeBootstrap(
+        SlimeWorld initial
+) {
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeChunkConverter.java b/src/main/java/com/infernalsuite/aswm/level/SlimeChunkConverter.java
new file mode 100644
index 0000000000000000000000000000000000000000..86a5b457bdca63713769d2b708be905d72ff76a3
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeChunkConverter.java
@@ -0,0 +1,184 @@
+package com.infernalsuite.aswm.level;
+
+import ca.spottedleaf.moonrise.patches.starlight.light.SWMRNibbleArray;
+import ca.spottedleaf.moonrise.patches.starlight.light.StarLightEngine;
+import com.flowpowered.nbt.CompoundMap;
+import com.flowpowered.nbt.CompoundTag;
+import com.flowpowered.nbt.LongArrayTag;
+import com.infernalsuite.aswm.Converter;
+import com.infernalsuite.aswm.api.utils.NibbleArray;
+import com.infernalsuite.aswm.api.world.SlimeChunk;
+import com.infernalsuite.aswm.api.world.SlimeChunkSection;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.LevelChunkSection;
+import net.minecraft.world.level.chunk.PalettedContainer;
+import net.minecraft.world.level.chunk.UpgradeData;
+import net.minecraft.world.level.chunk.status.ChunkStatusTasks;
+import net.minecraft.world.level.chunk.storage.ChunkSerializer;
+import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.material.Fluid;
+import net.minecraft.world.ticks.LevelChunkTicks;
+
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Optional;
+
+public class SlimeChunkConverter {
+
+    static SlimeChunkLevel deserializeSlimeChunk(SlimeLevelInstance instance, SlimeChunk chunk) {
+        int x = chunk.getX();
+        int z = chunk.getZ();
+
+        ChunkPos pos = new ChunkPos(x, z);
+
+        // Chunk sections
+        LevelChunkSection[] sections = new LevelChunkSection[instance.getSectionsCount()];
+
+        SWMRNibbleArray[] blockNibbles = StarLightEngine.getFilledEmptyLight(instance);
+        SWMRNibbleArray[] skyNibbles = StarLightEngine.getFilledEmptyLight(instance);
+        instance.getServer().scheduleOnMain(() -> {
+            instance.getLightEngine().retainData(pos, true);
+        });
+
+        Registry<Biome> biomeRegistry = instance.registryAccess().registryOrThrow(Registries.BIOME);
+        // Ignore deprecated method
+
+        Codec<PalettedContainer<Holder<Biome>>> codec = PalettedContainer.codecRW(biomeRegistry.asHolderIdMap(), biomeRegistry.holderByNameCodec(), PalettedContainer.Strategy.SECTION_BIOMES, biomeRegistry.getHolderOrThrow(Biomes.PLAINS), null);
+
+        for (int sectionId = 0; sectionId < chunk.getSections().length; sectionId++) {
+            SlimeChunkSection slimeSection = chunk.getSections()[sectionId];
+
+            if (slimeSection != null) {
+                NibbleArray blockLight = slimeSection.getBlockLight();
+                if (blockLight != null) {
+                    blockNibbles[sectionId] = new SWMRNibbleArray(blockLight.getBacking());
+                }
+
+                NibbleArray skyLight = slimeSection.getSkyLight();
+                if (skyLight != null) {
+                    skyNibbles[sectionId] = new SWMRNibbleArray(skyLight.getBacking());
+                }
+
+                PalettedContainer<BlockState> blockPalette;
+                if (slimeSection.getBlockStatesTag() != null) {
+                    DataResult<PalettedContainer<BlockState>> dataresult = ChunkSerializer.BLOCK_STATE_CODEC.parse(NbtOps.INSTANCE, Converter.convertTag(slimeSection.getBlockStatesTag())).promotePartial((s) -> {
+                        System.out.println("Recoverable error when parsing section " + x + "," + z + ": " + s); // todo proper logging
+                    });
+                    blockPalette = dataresult.getOrThrow(); // todo proper logging
+                } else {
+                    blockPalette = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, null);
+                }
+
+                PalettedContainer<Holder<Biome>> biomePalette;
+
+                if (slimeSection.getBiomeTag() != null) {
+                    DataResult<PalettedContainer<Holder<Biome>>> dataresult = codec.parse(NbtOps.INSTANCE, Converter.convertTag(slimeSection.getBiomeTag())).promotePartial((s) -> {
+                        System.out.println("Recoverable error when parsing section " + x + "," + z + ": " + s); // todo proper logging
+                    });
+                    biomePalette = dataresult.getOrThrow(); // todo proper logging
+                } else {
+                    biomePalette = new PalettedContainer<>(biomeRegistry.asHolderIdMap(), biomeRegistry.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null);
+                }
+
+                if (sectionId < sections.length) {
+                    LevelChunkSection section = new LevelChunkSection(blockPalette, biomePalette);
+                    sections[sectionId] = section;
+                }
+            }
+        }
+
+        // Keep the chunk loaded at level 33 to avoid light glitches
+        // Such a high level will let the server not tick the chunk,
+        // but at the same time it won't be completely unloaded from memory
+        //        getChunkProvider().addTicket(SWM_TICKET, pos, 33, Unit.INSTANCE);
+
+
+        LevelChunk.PostLoadProcessor loadEntities = (nmsChunk) -> {
+            List<CompoundTag> entities = chunk.getEntities();
+
+            if (entities != null) {
+                ChunkStatusTasks.postLoadProtoChunk(instance, entities.stream()
+                        .map(flowTag -> (net.minecraft.nbt.CompoundTag) Converter.convertTag(flowTag)).toList(), nmsChunk.getPos());
+            }
+        };
+
+        LevelChunkTicks<Block> blockLevelChunkTicks = new LevelChunkTicks<>();
+        LevelChunkTicks<Fluid> fluidLevelChunkTicks = new LevelChunkTicks<>();
+
+        UpgradeData upgradeData;
+        if (chunk.getUpgradeData() != null) {
+            upgradeData = new UpgradeData((net.minecraft.nbt.CompoundTag) Converter.convertTag(chunk.getUpgradeData()), instance);
+        } else {
+            upgradeData = UpgradeData.EMPTY;
+        }
+        SlimeChunkLevel nmsChunk = new SlimeChunkLevel(instance, pos, upgradeData, blockLevelChunkTicks, fluidLevelChunkTicks, 0L, sections, loadEntities, null);
+
+        List<CompoundTag> tileEntities = chunk.getTileEntities();
+
+        if (tileEntities != null) {
+            for (CompoundTag tag : tileEntities) {
+                Optional<String> type = tag.getStringValue("id");
+
+                // Sometimes null tile entities are saved
+                if (type.isPresent()) {
+                    BlockPos blockPosition = new BlockPos(tag.getIntValue("x").get(), tag.getIntValue("y").get(), tag.getIntValue("z").get());
+                    BlockState blockData = nmsChunk.getBlockState(blockPosition);
+                    BlockEntity entity = BlockEntity.loadStatic(blockPosition, blockData, (net.minecraft.nbt.CompoundTag) Converter.convertTag(tag), net.minecraft.server.MinecraftServer.getServer().registryAccess());
+
+                    if (entity != null) {
+                        nmsChunk.setBlockEntity(entity);
+                    }
+                }
+            }
+        }
+
+        // Height Maps
+        EnumSet<Heightmap.Types> heightMapTypes = nmsChunk.getPersistedStatus().heightmapsAfter();
+        CompoundMap heightMaps = chunk.getHeightMaps().getValue();
+        EnumSet<Heightmap.Types> unsetHeightMaps = EnumSet.noneOf(Heightmap.Types.class);
+
+        // Light
+        nmsChunk.starlight$setBlockNibbles(blockNibbles);
+        nmsChunk.starlight$setSkyNibbles(skyNibbles);
+
+        for (Heightmap.Types type : heightMapTypes) {
+            String name = type.getSerializedName();
+
+            if (heightMaps.containsKey(name)) {
+                LongArrayTag heightMap = (LongArrayTag) heightMaps.get(name);
+                nmsChunk.setHeightmap(type, heightMap.getValue());
+            } else {
+                unsetHeightMaps.add(type);
+            }
+        }
+
+        // Don't try to populate heightmaps if there are none.
+        // Does a crazy amount of block lookups
+        if (!unsetHeightMaps.isEmpty()) {
+            Heightmap.primeHeightmaps(nmsChunk, unsetHeightMaps);
+        }
+
+        net.minecraft.nbt.CompoundTag nmsExtraData = (net.minecraft.nbt.CompoundTag) Converter.convertTag(chunk.getExtraData());
+
+        // Attempt to read PDC from the extra tag
+        if (nmsExtraData.get("ChunkBukkitValues") != null) {
+            nmsChunk.persistentDataContainer.putAll(nmsExtraData.getCompound("ChunkBukkitValues"));
+        }
+
+        return nmsChunk;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeChunkLevel.java b/src/main/java/com/infernalsuite/aswm/level/SlimeChunkLevel.java
new file mode 100644
index 0000000000000000000000000000000000000000..2ebabf20c37d2b5c479de5bb241aa334f92a1104
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeChunkLevel.java
@@ -0,0 +1,33 @@
+package com.infernalsuite.aswm.level;
+
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.LevelChunkSection;
+import net.minecraft.world.level.chunk.UpgradeData;
+import net.minecraft.world.level.levelgen.blending.BlendingData;
+import net.minecraft.world.level.material.Fluid;
+import net.minecraft.world.ticks.LevelChunkTicks;
+import org.jetbrains.annotations.Nullable;
+
+public class SlimeChunkLevel extends LevelChunk {
+
+    private final SlimeInMemoryWorld inMemoryWorld;
+
+    public SlimeChunkLevel(SlimeLevelInstance world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) {
+        super(world, pos, upgradeData, blockTickScheduler, fluidTickScheduler, inhabitedTime, sectionArrayInitializer, entityLoader, blendingData);
+        this.inMemoryWorld = world.slimeInstance;
+    }
+
+    @Override
+    public void unloadCallback() {
+        super.unloadCallback();
+        this.inMemoryWorld.unload(this);
+    }
+
+    @Override
+    public void loadCallback() {
+        super.loadCallback();
+        this.inMemoryWorld.ensureChunkMarkedAsLoaded(this);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeInMemoryWorld.java b/src/main/java/com/infernalsuite/aswm/level/SlimeInMemoryWorld.java
new file mode 100644
index 0000000000000000000000000000000000000000..770679851baba2ddb9f8f427f4cd80ea8b32122b
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeInMemoryWorld.java
@@ -0,0 +1,285 @@
+package com.infernalsuite.aswm.level;
+
+import com.flowpowered.nbt.CompoundTag;
+import com.flowpowered.nbt.Tag;
+import com.infernalsuite.aswm.Converter;
+import com.infernalsuite.aswm.Util;
+import com.infernalsuite.aswm.api.exceptions.WorldAlreadyExistsException;
+import com.infernalsuite.aswm.api.loaders.SlimeLoader;
+import com.infernalsuite.aswm.pdc.FlowPersistentDataContainer;
+import com.infernalsuite.aswm.serialization.slime.SlimeSerializer;
+import com.infernalsuite.aswm.skeleton.SkeletonCloning;
+import com.infernalsuite.aswm.skeleton.SkeletonSlimeWorld;
+import com.infernalsuite.aswm.skeleton.SlimeChunkSkeleton;
+import com.infernalsuite.aswm.api.world.SlimeChunk;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.api.world.SlimeWorldInstance;
+import com.infernalsuite.aswm.api.world.properties.SlimePropertyMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.UpgradeData;
+import net.minecraft.world.level.material.Fluid;
+import net.minecraft.world.ticks.LevelChunkTicks;
+import org.bukkit.World;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/*
+The concept of this is a bit flawed, since ideally this should be a 1:1 representation of the MC world.
+However, due to the complexity of the chunk system we essentially need to wrap around it.
+This stores slime chunks, and when unloaded, will properly convert it to a normal slime chunk for storage.
+ */
+public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
+
+    private final SlimeLevelInstance instance;
+    private final SlimeWorld liveWorld;
+
+    private final CompoundTag extra;
+    private final FlowPersistentDataContainer extraPDC;
+    private final SlimePropertyMap propertyMap;
+    private final SlimeLoader loader;
+
+    private final Long2ObjectMap<SlimeChunk> chunkStorage = new Long2ObjectOpenHashMap<>();
+    private boolean readOnly;
+    // private final Map<ChunkPos, List<CompoundTag>> entityStorage = new HashMap<>();
+
+    public SlimeInMemoryWorld(SlimeBootstrap bootstrap, SlimeLevelInstance instance) {
+        this.instance = instance;
+        this.extra = bootstrap.initial().getExtraData();
+        this.propertyMap = bootstrap.initial().getPropertyMap();
+        this.loader = bootstrap.initial().getLoader();
+        this.readOnly = bootstrap.initial().isReadOnly();
+
+        for (SlimeChunk initial : bootstrap.initial().getChunkStorage()) {
+            long pos = Util.chunkPosition(initial.getX(), initial.getZ());
+            List<CompoundTag> tags = new ArrayList<>(initial.getEntities());
+
+            //  this.entityStorage.put(pos, tags);
+            this.chunkStorage.put(pos, initial);
+        }
+
+        this.extraPDC = new FlowPersistentDataContainer(extra);
+        this.liveWorld = new NMSSlimeWorld(this);
+    }
+
+    @Override
+    public String getName() {
+        return this.instance.getMinecraftWorld().serverLevelData.getLevelName();
+    }
+
+    @Override
+    public SlimeLoader getLoader() {
+        return this.loader;
+    }
+
+    public LevelChunk promote(int x, int z, SlimeChunk chunk) {
+        SlimeChunkLevel levelChunk;
+        if (chunk == null) {
+            net.minecraft.world.level.ChunkPos pos = new net.minecraft.world.level.ChunkPos(x, z);
+            LevelChunkTicks<Block> blockLevelChunkTicks = new LevelChunkTicks<>();
+            LevelChunkTicks<Fluid> fluidLevelChunkTicks = new LevelChunkTicks<>();
+
+            levelChunk = new SlimeChunkLevel(this.instance, pos, UpgradeData.EMPTY, blockLevelChunkTicks, fluidLevelChunkTicks,
+                    0L, null, null, null);
+
+            chunk = new NMSSlimeChunk(levelChunk, getChunk(x, z));
+
+        } else {
+            levelChunk = SlimeChunkConverter.deserializeSlimeChunk(this.instance, chunk);
+            chunk = new SafeNmsChunkWrapper(new NMSSlimeChunk(levelChunk, chunk), chunk);
+        }
+        this.chunkStorage.put(Util.chunkPosition(x, z), chunk);
+
+        return levelChunk;
+    }
+
+    // Authored by: Kenox <muranelp@gmail.com>
+    // Don't use the NMS live chunk in the chunk map
+    public void unload(LevelChunk providedChunk) {
+        final int x = providedChunk.locX;
+        final int z = providedChunk.locZ;
+
+        SlimeChunk chunk = new NMSSlimeChunk(providedChunk, getChunk(x, z));
+
+        if (FastChunkPruner.canBePruned(this.liveWorld, providedChunk)) {
+            this.chunkStorage.remove(Util.chunkPosition(x, z));
+            return;
+        }
+
+        this.chunkStorage.put(Util.chunkPosition(x, z),
+                new SlimeChunkSkeleton(chunk.getX(), chunk.getZ(), chunk.getSections(),
+                        chunk.getHeightMaps(), chunk.getTileEntities(), chunk.getEntities(), chunk.getExtraData(), null));
+    }
+
+    @Override
+    public SlimeChunk getChunk(int x, int z) {
+        return this.chunkStorage.get(Util.chunkPosition(x, z));
+    }
+
+    @Override
+    public Collection<SlimeChunk> getChunkStorage() {
+        return this.chunkStorage.values();
+    }
+
+    @Override
+    public World getBukkitWorld() {
+        return this.instance.getWorld();
+    }
+
+    @Override
+    public SlimeWorld getSlimeWorldMirror() {
+        return this.liveWorld;
+    }
+
+    @Override
+    public SlimePropertyMap getPropertyMap() {
+        return this.propertyMap;
+    }
+
+    @Override
+    public boolean isReadOnly() {
+        return this.getLoader() == null || this.readOnly;
+    }
+
+    @Override
+    public SlimeWorld clone(String worldName) {
+        try {
+            return clone(worldName, null);
+        } catch (WorldAlreadyExistsException | IOException ignored) {
+            return null; // Never going to happen
+        }
+    }
+
+    @Override
+    public SlimeWorld clone(String worldName, SlimeLoader loader) throws WorldAlreadyExistsException, IOException {
+        if (this.getName().equals(worldName)) {
+            throw new IllegalArgumentException("The clone world cannot have the same name as the original world!");
+        }
+
+        if (worldName == null) {
+            throw new IllegalArgumentException("The world name cannot be null!");
+        }
+        if (loader != null) {
+            if (loader.worldExists(worldName)) {
+                throw new WorldAlreadyExistsException(worldName);
+            }
+        }
+
+        SlimeWorld cloned = SkeletonCloning.fullClone(worldName, this, loader);
+        if (loader != null) {
+            loader.saveWorld(worldName, SlimeSerializer.serialize(cloned));
+        }
+
+        return cloned;
+    }
+
+    @Override
+    public int getDataVersion() {
+        return this.liveWorld.getDataVersion();
+    }
+
+    @Override
+    public CompoundTag getExtraData() {
+        return this.extra;
+    }
+
+    @Override
+    public Collection<CompoundTag> getWorldMaps() {
+        return List.of();
+    }
+
+    //    public Map<ChunkPos, List<CompoundTag>> getEntityStorage() {
+    //        return entityStorage;
+    //    }
+
+    public SlimeWorld getForSerialization() {
+        SlimeWorld world = SkeletonCloning.weakCopy(this);
+
+        Long2ObjectMap<SlimeChunk> cloned = new Long2ObjectOpenHashMap<>();
+        for (Long2ObjectMap.Entry<SlimeChunk> entry : this.chunkStorage.long2ObjectEntrySet()) {
+            SlimeChunk clonedChunk = entry.getValue();
+            // NMS "live" chunks need to be converted
+            {
+                LevelChunk chunk = null;
+                if (clonedChunk instanceof SafeNmsChunkWrapper safeNmsChunkWrapper) {
+                    if (safeNmsChunkWrapper.shouldDefaultBackToSlimeChunk()) {
+                        clonedChunk = safeNmsChunkWrapper.getSafety();
+                    } else {
+                        chunk = safeNmsChunkWrapper.getWrapper().getChunk();
+                    }
+                } else if (clonedChunk instanceof NMSSlimeChunk nmsSlimeChunk) {
+                    chunk = nmsSlimeChunk.getChunk();
+                }
+
+                if (chunk != null) {
+                    if (FastChunkPruner.canBePruned(world, chunk)) {
+                        continue;
+                    }
+
+                    // Serialize Bukkit Values (PDC)
+
+                    Tag<?> flowTag = Converter.convertTag("ChunkBukkitValues", chunk.persistentDataContainer.toTagCompound());
+
+                    clonedChunk.getExtraData().getValue().put(flowTag);
+
+                    clonedChunk = new SlimeChunkSkeleton(
+                            clonedChunk.getX(),
+                            clonedChunk.getZ(),
+                            clonedChunk.getSections(),
+                            clonedChunk.getHeightMaps(),
+                            clonedChunk.getTileEntities(),
+                            clonedChunk.getEntities(),
+                            clonedChunk.getExtraData(),
+                            clonedChunk.getUpgradeData()
+                    );
+                }
+            }
+
+            cloned.put(entry.getLongKey(), clonedChunk);
+        }
+
+        // Serialize Bukkit Values (PDC)
+
+        var nmsTag = new net.minecraft.nbt.CompoundTag();
+
+        instance.getWorld().storeBukkitValues(nmsTag);
+
+        // Bukkit stores the relevant tag as a tag with the key "BukkitValues" in the tag we supply to it
+        var flowTag = Converter.convertTag("BukkitValues", nmsTag.getCompound("BukkitValues"));
+
+        world.getExtraData().getValue().put(flowTag);
+
+        return new SkeletonSlimeWorld(world.getName(),
+                world.getLoader(),
+                world.isReadOnly(),
+                cloned,
+                world.getExtraData(),
+                world.getPropertyMap(),
+                world.getDataVersion()
+        );
+    }
+
+    public SlimeLevelInstance getInstance() {
+        return instance;
+    }
+
+    @Override
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
+        return this.extraPDC;
+    }
+
+    public void ensureChunkMarkedAsLoaded(SlimeChunkLevel chunk) {
+        if (chunkStorage.get(Util.chunkPosition(chunk.locX, chunk.locZ)) instanceof SlimeChunkSkeleton skeleton) {
+            chunkStorage.put(Util.chunkPosition(chunk.locX, chunk.locZ), new NMSSlimeChunk(chunk, skeleton));
+        }
+    }
+}
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelGenerator.java b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelGenerator.java
new file mode 100644
index 0000000000000000000000000000000000000000..aa3ed7005ddfda74b2c3ca1e1dde810c62aa1ce7
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelGenerator.java
@@ -0,0 +1,40 @@
+package com.infernalsuite.aswm.level;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.MapCodec;
+import net.minecraft.core.Holder;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.BiomeSource;
+import net.minecraft.world.level.biome.Climate;
+import net.minecraft.world.level.levelgen.FlatLevelSource;
+import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.Stream;
+
+public class SlimeLevelGenerator extends FlatLevelSource {
+
+    public SlimeLevelGenerator(Holder<Biome> biome) {
+        super(new FlatLevelGeneratorSettings(Optional.empty(), biome, List.of()), getSource(biome));
+    }
+
+    private static BiomeSource getSource(Holder<Biome> biome) {
+        return new BiomeSource() {
+            @Override
+            protected MapCodec<? extends BiomeSource> codec() {
+                return null;
+            }
+
+            @Override
+            protected Stream<Holder<Biome>> collectPossibleBiomes() {
+                return Stream.of(biome);
+            }
+
+            @Override
+            public Holder<Biome> getNoiseBiome(int x, int y, int z, Climate.Sampler noise) {
+                return biome;
+            }
+        };
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
new file mode 100644
index 0000000000000000000000000000000000000000..187336ecaa4262e3f081a88702031b17c6037091
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
@@ -0,0 +1,208 @@
+package com.infernalsuite.aswm.level;
+
+import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
+import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler;
+import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.task.ChunkLoadTask;
+import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.task.GenericDataLoadTask;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.api.world.SlimeWorldInstance;
+import com.infernalsuite.aswm.api.world.properties.SlimeProperties;
+import com.infernalsuite.aswm.api.world.properties.SlimePropertyMap;
+import com.infernalsuite.aswm.serialization.slime.SlimeSerializer;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Holder;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.TicketType;
+import net.minecraft.util.ProgressListener;
+import net.minecraft.util.Unit;
+import net.minecraft.util.datafix.DataFixers;
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.dimension.LevelStem;
+import net.minecraft.world.level.storage.LevelStorageSource;
+import net.minecraft.world.level.storage.PrimaryLevelData;
+import net.minecraft.world.level.validation.DirectoryValidator;
+import org.apache.commons.io.FileUtils;
+import org.bukkit.Bukkit;
+import org.bukkit.event.world.WorldSaveEvent;
+import org.jetbrains.annotations.Nullable;
+import org.spigotmc.AsyncCatcher;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Collections;
+import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.function.Consumer;
+import java.util.logging.Level;
+
+public class SlimeLevelInstance extends ServerLevel {
+
+
+    public static LevelStorageSource CUSTOM_LEVEL_STORAGE;
+
+    static {
+        try {
+            Path path = Files.createTempDirectory("swm-" + UUID.randomUUID().toString().substring(0, 5)).toAbsolutePath();
+            DirectoryValidator directoryvalidator = LevelStorageSource.parseValidator(path.resolve("allowed_symlinks.txt"));
+            CUSTOM_LEVEL_STORAGE = new LevelStorageSource(path, path, directoryvalidator, DataFixers.getDataFixer());
+
+            FileUtils.forceDeleteOnExit(path.toFile());
+
+        } catch (IOException ex) {
+            throw new IllegalStateException("Couldn't create dummy file directory.", ex);
+        }
+    }
+
+    private static final ExecutorService WORLD_SAVER_SERVICE = Executors.newFixedThreadPool(4, new ThreadFactoryBuilder()
+            .setNameFormat("SWM Pool Thread #%1$d").build());
+    private static final TicketType<Unit> SWM_TICKET = TicketType.create("swm-chunk", (a, b) -> 0);
+
+    private final Object saveLock = new Object();
+
+    public SlimeLevelInstance(SlimeBootstrap slimeBootstrap, PrimaryLevelData primaryLevelData,
+                              ResourceKey<net.minecraft.world.level.Level> worldKey,
+                              ResourceKey<LevelStem> dimensionKey, LevelStem worldDimension,
+                              org.bukkit.World.Environment environment) throws IOException {
+
+        super(slimeBootstrap, MinecraftServer.getServer(), MinecraftServer.getServer().executor,
+                CUSTOM_LEVEL_STORAGE.createAccess(slimeBootstrap.initial().getName() + UUID.randomUUID(), dimensionKey),
+                primaryLevelData, worldKey, worldDimension,
+                MinecraftServer.getServer().progressListenerFactory.create(11), false, null, 0,
+                Collections.emptyList(), true, environment, null, null);
+        this.slimeInstance = new SlimeInMemoryWorld(slimeBootstrap, this);
+
+
+        SlimePropertyMap propertyMap = slimeBootstrap.initial().getPropertyMap();
+
+        this.serverLevelData.setDifficulty(Difficulty.valueOf(propertyMap.getValue(SlimeProperties.DIFFICULTY).toUpperCase()));
+        this.serverLevelData.setSpawn(new BlockPos(
+                propertyMap.getValue(SlimeProperties.SPAWN_X),
+                propertyMap.getValue(SlimeProperties.SPAWN_Y),
+                propertyMap.getValue(SlimeProperties.SPAWN_Z)),
+                propertyMap.getValue(SlimeProperties.SPAWN_YAW));
+        super.setSpawnSettings(propertyMap.getValue(SlimeProperties.ALLOW_MONSTERS), propertyMap.getValue(SlimeProperties.ALLOW_ANIMALS));
+
+        this.pvpMode = propertyMap.getValue(SlimeProperties.PVP);
+    }
+
+    @Override
+    public ChunkGenerator getGenerator(SlimeBootstrap slimeBootstrap) {
+        String biomeStr = slimeBootstrap.initial().getPropertyMap().getValue(SlimeProperties.DEFAULT_BIOME);
+        ResourceKey<Biome> biomeKey = ResourceKey.create(Registries.BIOME, ResourceLocation.parse(biomeStr));
+        Holder<Biome> defaultBiome = MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME).getHolder(biomeKey).orElseThrow();
+        return new SlimeLevelGenerator(defaultBiome);
+    }
+
+    @Override
+    public void save(@Nullable ProgressListener progressUpdate, boolean forceSave, boolean savingDisabled, boolean close) {
+        if (!savingDisabled) save();
+    }
+
+    public Future<?> save() {
+        AsyncCatcher.catchOp("SWM world save");
+        try {
+            if (!this.slimeInstance.isReadOnly() && this.slimeInstance.getLoader() != null) {
+                Bukkit.getPluginManager().callEvent(new WorldSaveEvent(getWorld()));
+
+                //this.getChunkSource().save(forceSave);
+                this.serverLevelData.setWorldBorder(this.getWorldBorder().createSettings());
+                this.serverLevelData.setCustomBossEvents(MinecraftServer.getServer().getCustomBossEvents().save(MinecraftServer.getServer().registryAccess()));
+
+                // Update level data
+                net.minecraft.nbt.CompoundTag compound = new net.minecraft.nbt.CompoundTag();
+                net.minecraft.nbt.CompoundTag nbtTagCompound = this.serverLevelData.createTag(MinecraftServer.getServer().registryAccess(), compound);
+
+                if (MinecraftServer.getServer().isStopped()) { // Make sure the world gets saved before stopping the server by running it from the main thread
+                    saveInternal().get(); // Async wait for it to finish
+                } else {
+                    return this.saveInternal();
+                    //WORLD_SAVER_SERVICE.execute(this::save);
+                }
+            }
+        } catch (Throwable e) {
+            e.printStackTrace();
+            return CompletableFuture.failedFuture(e);
+        }
+        return CompletableFuture.completedFuture(null);
+    }
+
+    /*
+    @Override
+    public void saveIncrementally(boolean doFull) {
+        if (doFull) {
+            this.save(null, false, false);
+        }
+    }*/ // Most likely unused - kyngs
+
+    private Future<?> saveInternal() {
+        synchronized (saveLock) { // Don't want to save the SlimeWorld from multiple threads simultaneously
+            SlimeWorldInstance slimeWorld = this.slimeInstance;
+            Bukkit.getLogger().log(Level.INFO, "Saving world " + this.slimeInstance.getName() + "...");
+            long start = System.currentTimeMillis();
+
+            SlimeWorld world = this.slimeInstance.getForSerialization();
+            return WORLD_SAVER_SERVICE.submit(() -> {
+                try {
+                    byte[] serializedWorld = SlimeSerializer.serialize(world);
+                    long saveStart = System.currentTimeMillis();
+                    slimeWorld.getLoader().saveWorld(slimeWorld.getName(), serializedWorld);
+                    Bukkit.getLogger().log(Level.INFO, "World " + slimeWorld.getName() + " serialized in " + (saveStart - start) + "ms and saved in " + (System.currentTimeMillis() - saveStart) + "ms.");
+                } catch (IOException | IllegalStateException ex) {
+                    ex.printStackTrace();
+                }
+            });
+
+        }
+    }
+
+    public SlimeWorldInstance getSlimeInstance() {
+        return this.slimeInstance;
+    }
+
+    public ChunkDataLoadTask getLoadTask(ChunkLoadTask task, ChunkTaskScheduler scheduler, ServerLevel world, int chunkX, int chunkZ, PrioritisedExecutor.Priority priority, Consumer<GenericDataLoadTask.TaskResult<ChunkAccess, Throwable>> onRun) {
+        return new ChunkDataLoadTask(task, scheduler, world, chunkX, chunkZ, priority, onRun);
+    }
+
+    /*
+    public void loadEntities(int chunkX, int chunkZ) {
+        SlimeChunk slimeChunk = this.slimeInstance.getChunk(chunkX, chunkZ);
+        if (slimeChunk != null) {
+            this.getEntityLookup().addLegacyChunkEntities(new ArrayList<>(
+                    EntityType.loadEntitiesRecursive(slimeChunk.getEntities()
+                                    .stream()
+                                    .map((tag) -> (net.minecraft.nbt.CompoundTag) Converter.convertTag(tag))
+                                    .collect(Collectors.toList()), this)
+                            .toList()
+            ), new ChunkPos(chunkX, chunkZ));
+        }
+    }*/ // Most likely unused - kyngs
+
+    @Override
+    public void setDefaultSpawnPos(BlockPos pos, float angle) {
+        super.setDefaultSpawnPos(pos, angle);
+
+        SlimePropertyMap propertyMap = this.slimeInstance.getPropertyMap();
+        propertyMap.setValue(SlimeProperties.SPAWN_X, pos.getX());
+        propertyMap.setValue(SlimeProperties.SPAWN_Y, pos.getY());
+        propertyMap.setValue(SlimeProperties.SPAWN_Z, pos.getZ());
+        propertyMap.setValue(SlimeProperties.SPAWN_YAW, angle);
+    }
+
+    //    @Override
+    //    public void unload(LevelChunk chunk) {
+    //        this.slimeInstance.unload(chunk);
+    //        super.unload(chunk);
+    //    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/util/NmsUtil.java b/src/main/java/com/infernalsuite/aswm/util/NmsUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..4a5a6f208ad91fd861bd6f2b2c008ef14a547d6e
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/util/NmsUtil.java
@@ -0,0 +1,46 @@
+package com.infernalsuite.aswm.util;
+
+import com.infernalsuite.aswm.InternalPlugin;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.plugin.Plugin;
+
+import java.util.concurrent.CountDownLatch;
+
+public class NmsUtil {
+
+    public static long asLong(int chunkX, int chunkZ) {
+        return (((long) chunkZ) * Integer.MAX_VALUE + ((long) chunkX));
+        //return (long)chunkX & 4294967295L | ((long)chunkZ & 4294967295L) << 32;
+    }
+
+    public static void runSyncAndWait(Runnable runnable) {
+        if (Bukkit.isPrimaryThread()) {
+            runnable.run();
+            return;
+        }
+
+        CountDownLatch latch = new CountDownLatch(1);
+        RuntimeException[] runtimeException = new RuntimeException[1];
+
+        Bukkit.getScheduler().runTask(new InternalPlugin(), () -> {
+            try {
+                runnable.run();
+            } catch (RuntimeException e) {
+                runtimeException[0] = e;
+            } finally {
+                latch.countDown();
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e); // Rather propagate the interrupt (and thus prevent further execution) than continue
+        }
+
+        if (runtimeException[0] != null) {
+            throw runtimeException[0];
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java b/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
index 790bad0494454ca12ee152e3de6da3da634d9b20..d1b48f54a7f5e239d5bbf68499ea4911e1b5c0c6 100644
--- a/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
+++ b/src/main/java/io/papermc/paper/ServerBuildInfoImpl.java
@@ -31,6 +31,7 @@ public record ServerBuildInfoImpl(
     private static final String ATTRIBUTE_GIT_COMMIT = "Git-Commit";
 
     private static final String BRAND_PAPER_NAME = "Paper";
+    private static final String BRAND_ADVANCED_SLIME_PUFFERFISH_NAME = "AdvancedSlimePufferfish"; // ASWM
 
     private static final String BUILD_DEV = "DEV";
 
@@ -44,7 +45,7 @@ public record ServerBuildInfoImpl(
                 .map(Key::key)
                 .orElse(BRAND_PAPER_ID),
             getManifestAttribute(manifest, ATTRIBUTE_BRAND_NAME)
-                .orElse(BRAND_PAPER_NAME),
+                .orElse(BRAND_ADVANCED_SLIME_PUFFERFISH_NAME),
             SharedConstants.getCurrentVersion().getId(),
             SharedConstants.getCurrentVersion().getName(),
             getManifestAttribute(manifest, ATTRIBUTE_BUILD_NUMBER)
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e63721261258dba60b1eef2eee011e0aa18b0fd2..c9cbf9a4a38571f556ea4e899b0ee50113fd28f2 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -546,18 +546,29 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             if (dimensionKey == LevelStem.NETHER) {
                 if (this.server.getAllowNether()) {
                     dimension = -1;
+                    if (com.infernalsuite.aswm.SlimeNMSBridgeImpl.instance().loadNetherOverride()) { // ASWM Start
+                        continue;
+                    } // ASWM end
                 } else {
                     continue;
                 }
             } else if (dimensionKey == LevelStem.END) {
                 if (this.server.getAllowEnd()) {
                     dimension = 1;
+                    if (com.infernalsuite.aswm.SlimeNMSBridgeImpl.instance().loadEndOverride()) { // ASWM Start
+                        continue;
+                    } // ASWM end
                 } else {
                     continue;
                 }
             } else if (dimensionKey != LevelStem.OVERWORLD) {
                 dimension = -999;
             }
+            // ASWM start
+            else if(dimensionKey == LevelStem.OVERWORLD && com.infernalsuite.aswm.SlimeNMSBridgeImpl.instance().loadOverworldOverride()) {
+                continue;
+            }
+            // ASWM end
 
             String worldType = (dimension == -999) ? dimensionKey.location().getNamespace() + "_" + dimensionKey.location().getPath() : org.bukkit.World.Environment.getEnvironment(dimension).toString().toLowerCase(Locale.ROOT);
             String name = (dimensionKey == LevelStem.OVERWORLD) ? s : s + "_" + worldType;
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index dbc62bf37a9e6e1936558338521938a47a51e2d6..9b2f6026f311c447f2f4b366b4ca8f862fe0eb31 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -130,8 +130,11 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
 
     public boolean firstRunSpawnCounts = true; // Pufferfish
     public final java.util.concurrent.atomic.AtomicBoolean _pufferfish_spawnCountsReady = new java.util.concurrent.atomic.AtomicBoolean(false); // Pufferfish - optimize countmobs
-
-    public ServerChunkCache(ServerLevel world, LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, StructureTemplateManager structureTemplateManager, Executor workerExecutor, ChunkGenerator chunkGenerator, int viewDistance, int simulationDistance, boolean dsync, ChunkProgressListener worldGenerationProgressListener, ChunkStatusUpdateListener chunkStatusChangeListener, Supplier<DimensionDataStorage> persistentStateManagerFactory) {
+    // ASWM start
+    public final com.infernalsuite.aswm.level.SlimeBootstrap bootstrap;
+    public ServerChunkCache(com.infernalsuite.aswm.level.SlimeBootstrap bootstrap, ServerLevel world, LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, StructureTemplateManager structureTemplateManager, Executor workerExecutor, ChunkGenerator chunkGenerator, int viewDistance, int simulationDistance, boolean dsync, ChunkProgressListener worldGenerationProgressListener, ChunkStatusUpdateListener chunkStatusChangeListener, Supplier<DimensionDataStorage> persistentStateManagerFactory) { // ASWM
+        this.bootstrap = bootstrap;
+        // ASWM end
         this.level = world;
         this.mainThreadProcessor = new ServerChunkCache.MainThreadExecutor(world);
         this.mainThread = Thread.currentThread();
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 2a8ffcdd262ea73844500846c6401cdda7153d61..5ec51fea7f94f73ae4b6f2c3fe1314792ccf5345 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -499,6 +499,14 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
     // Add env and gen to constructor, IWorldDataServer -> WorldDataServer
     public ServerLevel(MinecraftServer minecraftserver, Executor executor, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PrimaryLevelData iworlddataserver, ResourceKey<Level> resourcekey, LevelStem worlddimension, ChunkProgressListener worldloadlistener, boolean flag, long i, List<CustomSpawner> list, boolean flag1, @Nullable RandomSequences randomsequences, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider) {
+        // ASWM START
+        this(null, minecraftserver, executor, convertable_conversionsession, iworlddataserver, resourcekey, worlddimension, worldloadlistener, flag, randomsequences, i, list, flag1, env, gen, biomeProvider);
+    }
+
+    public com.infernalsuite.aswm.level.SlimeInMemoryWorld slimeInstance;
+
+    public ServerLevel(com.infernalsuite.aswm.level.SlimeBootstrap bootstrap, MinecraftServer minecraftserver, Executor executor, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PrimaryLevelData iworlddataserver, ResourceKey<Level> resourcekey, LevelStem worlddimension, ChunkProgressListener worldloadlistener, boolean flag, @Nullable RandomSequences randomsequences, long i, List<CustomSpawner> list, boolean flag1, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider) {
+        // ASWM END
         // IRegistryCustom.Dimension iregistrycustom_dimension = minecraftserver.registryAccess(); // CraftBukkit - decompile error
         // Holder holder = worlddimension.type(); // CraftBukkit - decompile error
 
@@ -538,6 +546,12 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
             chunkgenerator = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, chunkgenerator, gen);
         }
         // CraftBukkit end
+        // ASWM START
+        ChunkGenerator result = this.getGenerator(bootstrap);
+        if (result != null) {
+            chunkgenerator = result;
+        }
+        // ASWM END
         boolean flag2 = minecraftserver.forceSynchronousWrites();
         DataFixer datafixer = minecraftserver.getFixerUpper();
         EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(new SimpleRegionStorage(new RegionStorageInfo(convertable_conversionsession.getLevelId(), resourcekey, "entities"), convertable_conversionsession.getDimensionPath(resourcekey).resolve("entities"), datafixer, flag2, DataFixTypes.ENTITY_CHUNK), this, minecraftserver);
@@ -548,7 +562,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         int k = this.spigotConfig.simulationDistance; // Spigot
         // Paper - rewrite chunk system
 
-        this.chunkSource = new ServerChunkCache(this, convertable_conversionsession, datafixer, structuretemplatemanager, executor, chunkgenerator, j, k, flag2, worldloadlistener, null, () -> { // Paper - rewrite chunk system
+        this.chunkSource = new ServerChunkCache(bootstrap, this, convertable_conversionsession, datafixer, structuretemplatemanager, executor, chunkgenerator, j, k, flag2, worldloadlistener, null, () -> { // Paper - rewrite chunk system // ASWM
             return minecraftserver.overworld().getDataStorage();
         });
         this.chunkSource.getGeneratorState().ensureStructuresGenerated();
@@ -606,6 +620,12 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         this.dragonFight = enderDragonFight;
     }
 
+    // ASWM START
+    public ChunkGenerator getGenerator(com.infernalsuite.aswm.level.SlimeBootstrap bootstrap) {
+        return null;
+    }
+    // ASWM END
+
     public void setWeatherParameters(int clearDuration, int rainDuration, boolean raining, boolean thundering) {
         this.serverLevelData.setClearWeatherTime(clearDuration);
         this.serverLevelData.setRainTime(rainDuration);
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 13d3c877b006a4975e7370713e3919c661e7890f..de9bd38cd09de67028c3218c27afc81e9eb3479b 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -386,7 +386,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         void accept(T object, int count);
     }
 
-    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
+    public static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) { // ASWM
         public void copyFrom(Palette<T> palette, BitStorage storage) {
             for (int i = 0; i < storage.getSize(); i++) {
                 T object = palette.valueFor(storage.get(i));
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 80553face9c70c2a3d897681e7761df85b22d464..29e29fb2228f08dff3edd8bf651220b83b16ed7b 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/gg.pufferfish.pufferfish/pufferfish-api/pom.properties"); // Pufferfish
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/com.infernalsuite.aswm/slimeworldmanager-api/pom.properties"); // ASWM
         Properties properties = new Properties();
 
         if (stream != null) {
diff --git a/src/main/resources/META-INF/services/com.infernalsuite.aswm.api.SlimeNMSBridge b/src/main/resources/META-INF/services/com.infernalsuite.aswm.api.SlimeNMSBridge
new file mode 100644
index 0000000000000000000000000000000000000000..d07947f0b42fe491617151e2aa7b0f02ff3ce610
--- /dev/null
+++ b/src/main/resources/META-INF/services/com.infernalsuite.aswm.api.SlimeNMSBridge
@@ -0,0 +1 @@
+com.infernalsuite.aswm.SlimeNMSBridgeImpl
\ No newline at end of file
