From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProdPreva1l <prod.preva1l@gmail.com>
Date: Thu, 14 Nov 2024 17:52:24 +1100
Subject: [PATCH] Upstream Changes ASP


diff --git a/build.gradle.kts b/build.gradle.kts
index 88313dc26db6491a7989aacc71ef1401c15a5204..b36b97cfb44c530657be97672db3bcb99cd9554d 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -17,9 +17,6 @@ dependencies {
     // ASWM start
     implementation(project(":slimeworldmanager-api"))
     implementation(project(":core"))
-    implementation("io.papermc.paper:paper-mojangapi:1.21.1-R0.1-SNAPSHOT") {
-        exclude("io.papermc.paper", "paper-api")
-    }
     // ASWM end
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.21.0")
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
index 45eda96fd8a1acb87dbb69ce5495fec7e451416f..cac1e5c4167af457381521c3550a7535b2acc0be 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/NewChunkHolder.java
@@ -112,7 +112,7 @@ public final class NewChunkHolder {
         }
 
         if (!transientChunk) {
-            if (entityChunk != null) {
+            if (!(this.world instanceof com.infernalsuite.aswm.level.SlimeLevelInstance) && entityChunk != null) {
                 final List<Entity> entities = ChunkEntitySlices.readEntities(this.world, entityChunk);
 
                 ((ChunkSystemServerLevel)this.world).moonrise$getEntityLookup().addEntityChunkEntities(entities, new ChunkPos(this.chunkX, this.chunkZ));
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
index 7ce9ebba8ce304d1f3f21d4f15ee5f3560d7700b..0521ea7663c62b104dee4abc056ef0c6d7cb26e4 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -11,6 +11,7 @@ import org.bukkit.event.EventHandler;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.Listener;
+import org.bukkit.event.world.WorldEvent;
 import org.bukkit.plugin.AuthorNagException;
 import org.bukkit.plugin.EventExecutor;
 import org.bukkit.plugin.IllegalPluginAccessException;
@@ -38,7 +39,7 @@ class PaperEventManager {
     public void callEvent(@NotNull Event event) {
         if (event.isAsynchronous() && this.server.isPrimaryThread()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
-        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
+        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping() && !(event instanceof WorldEvent)) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
         }
 
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 3e82ea07ca4194844c5528446e2c4a46ff4acee5..6fcae9b706000bb322706b7adbee90fa82ff306e 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -64,6 +64,15 @@ class PaperPluginInstanceManager {
     }
 
     public @Nullable Plugin getPlugin(@NotNull String name) {
+        // ASP start - Warn if someone tries to get the old API instance
+        if (name.equals("SlimeWorldManager")) {
+            server.getLogger().warning("""
+            Hey! It seems like you're trying to access the old SlimeWorldManager API.
+            Since 1.21.0 the API is now provided by the server directly.
+            See the documentation at https://infernalsuite.com/docs/asp/migrating for more information.
+            """);
+        }
+        // ASP end
         return this.lookupNames.get(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH)); // Paper
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/storage/SimpleProviderStorage.java b/src/main/java/io/papermc/paper/plugin/storage/SimpleProviderStorage.java
index 26422904751647a061397ce978bba752149003cd..6592bafdb792b4da6a1a8424e20c6a4018581615 100644
--- a/src/main/java/io/papermc/paper/plugin/storage/SimpleProviderStorage.java
+++ b/src/main/java/io/papermc/paper/plugin/storage/SimpleProviderStorage.java
@@ -26,6 +26,15 @@ public abstract class SimpleProviderStorage<T> implements ProviderStorage<T> {
 
     @Override
     public void register(PluginProvider<T> provider) {
+        // ASP start - sanity check for old SlimeWorldManager
+        if (provider.getMeta().getName().equals("SlimeWorldManager")) {
+            LOGGER.warn("""
+            Hey! It looks like you're trying to load the old SlimeWorldManager plugin.
+            ASP no longer works like that, and you should remove the plugin from your server.
+            See the documentation at https://infernalsuite.com/docs/asp/migrating for more information.
+            """);
+            return;
+        } // ASP end
         this.providers.add(provider);
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index c9cbf9a4a38571f556ea4e899b0ee50113fd28f2..f8e1a3b458a45259762bb6ddaef269fe72b781f8 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -282,7 +282,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private final PackRepository packRepository;
     private final ServerScoreboard scoreboard;
     @Nullable
-    private CommandStorage commandStorage;
+    public CommandStorage commandStorage; // ASWM make public
     private final CustomBossEvents customBossEvents;
     private final ServerFunctionManager functionManager;
     private boolean enforceWhitelist;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 00987d0e1ee8a9541b0610616ace1c84d50e5f1a..305e7409e3e4141dfae0b3d47cc0a702febc12a5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.chunk;
 
+import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
@@ -313,6 +314,12 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
         }
     }
 
+    // ASWM start - maintain binary compatibility with 1.20.6
+    public NewChunkHolder getChunkHolder() {
+        return this.level.moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(chunkPos.x, chunkPos.z);
+    }
+    // ASWM end
+
     // Paper start - If loaded util
     @Override
     public final FluidState getFluidIfLoaded(BlockPos blockposition) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 56506f364d518ccd132ae65566a7994c15185af3..eaa7b14197c9617c1b15cd6f51d25402185b7933 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -354,7 +354,7 @@ public class ChunkSerializer {
         ChunkSerializer.LOGGER.error("Recoverable errors when loading section [{}, {}, {}]: {}", new Object[]{chunkPos.x, y, chunkPos.z, message});
     }
 
-    private static Codec<PalettedContainerRO<Holder<Biome>>> makeBiomeCodec(Registry<Biome> biomeRegistry) {
+    public static Codec<PalettedContainerRO<Holder<Biome>>> makeBiomeCodec(Registry<Biome> biomeRegistry) { // ASWM - Make public
         return PalettedContainer.codecRO(biomeRegistry.asHolderIdMap(), biomeRegistry.holderByNameCodec(), PalettedContainer.Strategy.SECTION_BIOMES, biomeRegistry.getHolderOrThrow(Biomes.PLAINS));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c7df339aeb62ee627edaf1bb4c8474b61e357ba6..aac4d7f926c87b70e76248a8e4e7251e71d2bd91 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -8,6 +8,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
+import com.infernalsuite.aswm.AdvancedSlimePaper;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -1473,6 +1474,8 @@ public final class CraftServer implements Server {
             return false;
         }
 
+        AdvancedSlimePaper.instance().onWorldUnload(world.getName()); // ASP - Remove unloaded world from map
+
         try {
             if (save) {
                 handle.save(null, true, false); // Paper - Fix saving in unloadWorld
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index d2a75850af9c6ad2aca66a5f994f1b587d73eac4..3b090baf12044e19150ec66017c76fc48358f1b7 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -6,7 +6,7 @@
         </Queue>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %msg%n%xEx{full}}">
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%c{1}] %msg%n%xEx{full}}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
@@ -16,7 +16,7 @@
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %stripAnsi{%msg}%n%xEx{full}">
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%c{1}] %stripAnsi{%msg}%n%xEx{full}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
